/* Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.activiti.impl.bpmn.parser;

import java.io.InputStream;
import java.net.URL;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;

import org.activiti.ActivitiException;
import org.activiti.ProcessDefinition;
import org.activiti.impl.bpmn.binding.BpmnBinding;
import org.activiti.impl.bpmn.binding.EndEventBinding;
import org.activiti.impl.bpmn.binding.ExclusiveGatewayBinding;
import org.activiti.impl.bpmn.binding.StartEventBinding;
import org.activiti.impl.bpmn.binding.TaskBinding;
import org.activiti.impl.bpmn.binding.UserTaskBinding;
import org.activiti.impl.definition.ActivityImpl;
import org.activiti.impl.definition.ProcessDefinitionImpl;
import org.activiti.impl.definition.ScopeElementImpl;
import org.activiti.impl.definition.TransitionImpl;
import org.activiti.impl.el.ExpressionManager;
import org.activiti.impl.interceptor.CommandContext;
import org.activiti.impl.scripting.ExpressionCondition;
import org.activiti.impl.scripting.ScriptingEngines;
import org.activiti.impl.variable.VariableDestroyWithExpression;
import org.activiti.impl.variable.VariableDestroyWithVariable;
import org.activiti.impl.variable.VariableInitializeWithExpression;
import org.activiti.impl.variable.VariableInitializeWithVariable;
import org.activiti.impl.xml.Element;
import org.activiti.impl.xml.Parse;
import org.activiti.pvm.ActivityBehavior;
import org.activiti.pvm.Listener;


/**
 * @author Tom Baeyens
 * @author Joram Barrez
 */
public class BpmnParse extends Parse {
  
  private static final Logger LOG = Logger.getLogger(BpmnParse.class.getName());
  
  public static final String BPMN_EXTENSIONS_NS = "http://activiti.org/bpmn-extensions";
  
  private static final String XSI_NS = "http://www.w3.org/2001/XMLSchema-instance";
  
  protected static final List<? extends BpmnBinding> ACTIVITY_BEHAVIOR_BINDINGS = Arrays.asList(
    new StartEventBinding(),
    new EndEventBinding(),
    new TaskBinding(),
    new UserTaskBinding(),
    new ExclusiveGatewayBinding()
  );
  
  protected static final String SCHEMA_RESOURCE = "org/activiti/impl/bpmn/parser/BPMN20.xsd";

  protected List<ProcessDefinitionImpl> processDefinitions = new ArrayList<ProcessDefinitionImpl>();
  protected Class<? extends ProcessDefinition> processDefinitionClass = ProcessDefinitionImpl.class;
  protected Map<String, Element> itemDefinitions = new HashMap<String, Element>();
  protected CommandContext commandContext;
  
  BpmnParse(BpmnParser bpmnParser) {
    super(bpmnParser);
    setSchemaResource(SCHEMA_RESOURCE);
  }
  
  @Override
  public BpmnParse execute() {
    super.execute(); 
    parseItemDefinitions(rootElement);
    parseProcessDefinitions(rootElement);
    return this;
  }
  
  protected void parseItemDefinitions(Element definitionsElement) {
    for (Element itemDefinitionElement : definitionsElement.elements()) {
      itemDefinitions.put(itemDefinitionElement.attribute("id"), itemDefinitionElement);
    }
  }

  protected void parseProcessDefinitions(Element definitionsElement) {
    // TODO: parse specific definitions data (id, imports, etc)
    for (Element processElement : definitionsElement.elements("process")) {
      processDefinitions.add(parseProcess(processElement));
    }
  }
  
  protected ProcessDefinitionImpl parseProcess(Element processElement) {
    ProcessDefinitionImpl processDefinition = null;
    try {
      processDefinition = (ProcessDefinitionImpl) processDefinitionClass.newInstance();
    } catch (Exception e) {
      throw new ActivitiException("couldn't instantiate process definition '"+processDefinitionClass+"'", e);
    }
    
    pushContextObject(processDefinition);
    try {
      
      /* Mapping object model - bpmn xml:
       * processDefinition.id -> generated by activiti engine
       * processDefinition.key -> bpmn id (required)
       * processDefinition.name -> bpmn name (optional)
       */
      processDefinition.setKey(processElement.attribute("id"));
      processDefinition.setName(processElement.attribute("name"));
      
      if (LOG.isLoggable(Level.FINE)) {
        LOG.fine("Parsing process " + processDefinition.getKey());
      }
      
      // Not yet supported on process level (PVM additions needed): parseProperties(processElement);
      parseActivities(processElement, processDefinition);
      parseSequenceFlow(processElement, processDefinition);
    } finally {
      popContextObject();
    }
    
    return processDefinition;
  }
  
  protected void parseActivities(Element processElement, ProcessDefinitionImpl processDefinition) {
    for (Element activityElement : processElement.elements()) {
      
      BpmnBinding binding = getActivityBehaviorBinding(activityElement);
      if (binding != null) {
        
        String id = activityElement.attribute("id");
        if (LOG.isLoggable(Level.FINE)) {
          LOG.fine("Parsing activity " + id);
        }
        
        ActivityImpl activity = processDefinition.createActivity(id);
        try {
          pushContextObject(activity);
          activity.setName(activityElement.attribute("name"));
          ActivityBehavior activityBehavior = (ActivityBehavior) binding.parse(activityElement, this);
          activity.setActivityBehavior(activityBehavior);
          if (parseProperties(activityElement)) {
            activity.setScope(true);
          }
        } finally {
          popContextObject();
        }
      }
    }
  }
  
  /** Returns true if property subelemens are found */
  public boolean parseProperties(Element element) {
    List<Element> propertyElements = element.elements("property");
    for (Element propertyElement : propertyElements) {
      parseProperty(propertyElement);
    }
    return !propertyElements.isEmpty();
  }

  public void parseProperty(Element propertyElement) {
    String id = propertyElement.attribute("id");
    String name = propertyElement.attribute("name");
    
    // If name isn't given, use the id as name
    if (name == null) {
      if (id == null) {
        throw new ActivitiException("Invalid property usage on line " 
                + propertyElement.getLine() + ": no id or name specified.");
      } else {
        name = id;
      }
    }
    
    String itemSubjectRef = propertyElement.attribute("itemSubjectRef");
    String type = null;
    if (itemSubjectRef != null) {
      Element itemDefinitionRef = itemDefinitions.get(itemSubjectRef);
      if (itemDefinitionRef != null) {
        type = itemDefinitionRef.attribute("structureRef");
      } else {
        throw new ActivitiException("Invalid itemDefinition reference: " 
                + itemSubjectRef + " not found");
      }
    }
    
    parsePropertyCustomExtensions(propertyElement, name, type);
  }

  protected void parsePropertyCustomExtensions(Element propertyElement, 
          String propertyName, String propertyType) {
    
    if (propertyType == null) {
      String type = propertyElement.attribute("activiti:type");
      propertyType = type != null ? type : "string"; // default is string
    }

    ScopeElementImpl scope = findContextualObject(ScopeElementImpl.class);
    scope.createVariableDeclaration(propertyName, propertyType);

    String src = propertyElement.attributeNS(BPMN_EXTENSIONS_NS, "src");
    if (src != null) {
      scope.addEventListener(Listener.EVENTNAME_START, 
              new VariableInitializeWithVariable(src, propertyName));
    }
    
    String srcExpr = propertyElement.attributeNS(BPMN_EXTENSIONS_NS, "srcExpr");
    if (srcExpr != null) {
      scope.addEventListener(Listener.EVENTNAME_START, 
              new VariableInitializeWithExpression(propertyName, srcExpr, "juel"));
    }
    
    String dst = propertyElement.attributeNS(BPMN_EXTENSIONS_NS, "dst");
    if (dst != null) {
      scope.addEventListener(Listener.EVENTNAME_END, 
              new VariableDestroyWithVariable(propertyName, dst));
    }
    
    String destExpr = propertyElement.attributeNS(BPMN_EXTENSIONS_NS, "dstExpr");
    if (destExpr != null) {
      scope.addEventListener(Listener.EVENTNAME_END, 
              new VariableDestroyWithExpression(propertyName, destExpr, "juel"));
    }
    
    String link = propertyElement.attributeNS(BPMN_EXTENSIONS_NS, "link");
    if (link != null) {
      scope.addEventListener(Listener.EVENTNAME_START, 
              new VariableInitializeWithVariable(link, propertyName));
      scope.addEventListener(Listener.EVENTNAME_END, 
              new VariableDestroyWithVariable(propertyName, link));
    }
    
    String linkExpr = propertyElement.attributeNS(BPMN_EXTENSIONS_NS, "linkExpr");
    if (linkExpr != null) {
      ExpressionManager expressionManager = commandContext.getExpressionManager();
      expressionManager.createValueExpression(linkExpr);
      scope.addEventListener(Listener.EVENTNAME_START, 
              new VariableInitializeWithExpression(linkExpr, propertyName, "juel"));
      scope.addEventListener(Listener.EVENTNAME_END, 
              new VariableDestroyWithExpression(propertyName, linkExpr, "juel"));
    }
  }
  
  protected void parseSequenceFlow(Element processElement, ProcessDefinitionImpl processDefinition) {
    for (Element sequenceFlowElement : processElement.elements("sequenceFlow")) {
      
      String id = sequenceFlowElement.attribute("id");
      String sourceRef = sequenceFlowElement.attribute("sourceRef");
      String destinationRef = sequenceFlowElement.attribute("targetRef");
      ActivityImpl sourceActivity = processDefinition.findActivity(sourceRef);
      ActivityImpl destinationActivity = processDefinition.findActivity(destinationRef);
      
      if (sourceActivity == null) {
        throw new ActivitiException("Invalid source of sequence flow '" + id + "'");
      }
      if (destinationActivity == null) {
        throw new ActivitiException("Invalid destination of sequence flow '" + id + "'");
      }
      
      TransitionImpl transition = sourceActivity.createTransition();
      transition.setId(id);
      transition.setName(sequenceFlowElement.attribute("name"));
      transition.setDestination(destinationActivity);
      parseSequenceFlowConditionExpression(sequenceFlowElement, transition);
    }
  }
  
  protected void parseSequenceFlowConditionExpression(Element seqFlowElement, TransitionImpl seqFlow) {
    Element conditionExprElement = seqFlowElement.element("conditionExpression");
    if (conditionExprElement != null) {
      String expr = conditionExprElement.getText();
      String type = conditionExprElement.attributeNS(XSI_NS, "type");
      if (type != null && !type.equals("tFormalExpression")) {
        throw new ActivitiException("Invalid type on conditionExpression (" 
                + conditionExprElement.getLine() + "). " 
                + "Only tFormalExpression is currently supported");
      }
      
      String language = conditionExprElement.attribute("language");
      if (language == null) {
        language = ScriptingEngines.DEFAULT_EXPRESSION_LANGUAGE;
      }
      
      seqFlow.setCondition(new ExpressionCondition(expr, language));
    }
  }
  
  protected BpmnBinding getActivityBehaviorBinding(Element element) {
    for (BpmnBinding activityBehaviorBinding : ACTIVITY_BEHAVIOR_BINDINGS) {
      if (activityBehaviorBinding.matches(element, this)) {
        return activityBehaviorBinding;
      }
    }
    return null;
  }

  public List<ProcessDefinitionImpl> getProcessDefinitions() {
    return processDefinitions;
  }
  
  public BpmnParse processDefinitionClass(Class<? extends ProcessDefinition> processDefinitionClass) {
    this.processDefinitionClass = processDefinitionClass;
    return this;
  }
  
  public CommandContext getCommandContext() {
    return commandContext;
  }
  
  public ExpressionManager getExpressionManager() {
    if (commandContext==null) {
      throw new ActivitiException("no command context set");
    }
    return commandContext.getExpressionManager();
  }
  
  public BpmnParse commandContext(CommandContext commandContext) {
    this.commandContext = commandContext;
    return this;
  }

  public BpmnParse name(String name) {
    super.name(name);
    return this;
  }

  public BpmnParse sourceInputStream(InputStream inputStream) {
    super.sourceInputStream(inputStream);
    return this;
  }

  public BpmnParse sourceResource(String resource, ClassLoader classLoader) {
    super.sourceResource(resource, classLoader);
    return this;
  }

  public BpmnParse sourceResource(String resource) {
    super.sourceResource(resource);
    return this;
  }

  public BpmnParse sourceString(String string) {
    super.sourceString(string);
    return this;
  }

  public BpmnParse sourceUrl(String url) {
    super.sourceUrl(url);
    return this;
  }

  public BpmnParse sourceUrl(URL url) {
    super.sourceUrl(url);
    return this;
  }
}
