<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "../../../target/docbook-tool-1.0/docbook-xml/docbookx.dtd">
<chapter>
  <title>Eclipse Designer</title>
  <para> Activiti comes with an Eclipse plugin, the Activiti Eclipse Designer, that can be used to
    graphically model, test and deploy BPMN 2.0 processes Eclipse. The Activiti Eclipse Designer is
    started and maintained by Tijs Rademakers, Tiese Barrell, Ron van Liempd and Yvo Swillens. </para>
  <section id="eclipseDesignerInstallation">
    <title>Installation</title>
    <para> The following installation instructions are verified on <ulink
        url="http://www.eclipse.org/downloads/">Eclipse Classic Helios</ulink>. </para>
    <para> Go to <emphasis role="bold">Help -> Install New Software</emphasis>. In the following
      panel, click on <emphasis>Add</emphasis> button and fill in the following fields: <itemizedlist>
        <listitem>
          <para><emphasis role="bold">Name: </emphasis>Activiti BPMN 2.0 designer</para>
        </listitem>
        <listitem>
          <para><emphasis role="bold">Location:
            </emphasis>http://activiti.org/designer/update/</para>
        </listitem>
      </itemizedlist>
      <mediaobject>
        <imageobject>
          <imagedata align="center" fileref="images/designer.add.update.site.png"/>
        </imageobject>
      </mediaobject> Make sure the <emphasis role="bold">"Contact all updates sites.."</emphasis>
      checkbox is not checked, because all the necessary plugins can be downloaded from the Activiti
      update site. </para>
  </section>
  <section id="eclipseDesignerEditorFeatures">
    <title>Activiti Designer editor features</title>
    <para>
      <itemizedlist>
        <listitem>
          <para> Create Activiti projects and diagrams. <mediaobject>
              <imageobject>
                <imagedata align="center" fileref="images/designer.create.activiti.project.png"/>
              </imageobject>
            </mediaobject>
          </para>
        </listitem>
        <listitem>
          <para> The Activiti project is generated as a Maven project. To configure the dependencies
            you need to run <emphasis>mvn eclipse:eclipse</emphasis> and the project dependencies
            will be configured as expected. <mediaobject>
              <imageobject>
                <imagedata align="center" fileref="images/designer.project.maven.png"/>
              </imageobject>
            </mediaobject>
          </para>
        </listitem>
        <listitem>
          <para> A BPMN 2.0 XML file and an image of the process are automatically generated after
            each save of the Activiti diagram (the automatic generation can be switched of in the
            Eclipse preferences in the Activiti tab). <mediaobject>
              <imageobject>
                <imagedata align="center" fileref="images/designer.export.to.bpmn20.png"/>
              </imageobject>
            </mediaobject>
          </para>
        </listitem>
        <listitem>
          <para> Generate a unit test (right click on a BPMN 2.0 XML file in the package explorer
            and select <emphasis>generate unit test</emphasis>) A unit test is generated with an
            Activiti configuration that runs on an embedded H2 database. You can now run the unit
            test to test your process definition. <mediaobject>
              <imageobject>
                <imagedata align="center" fileref="images/designer.unittest.generate.png"/>
              </imageobject>
            </mediaobject>
          </para>
        </listitem>
        <listitem>
          <para> The BPMN 2.0 XML is opened in a Activiti XML editor which provides content assist.
            Note that there are 2 main XSDs configured, the BPMN 2.0 spec XSD and the Activiti
            extensions XSD. These two XSDs are not yet alligned in a good manneer. <mediaobject>
              <imageobject>
                <imagedata align="center" fileref="images/designer.xml.contentassist.png"/>
              </imageobject>
            </mediaobject>
          </para>
        </listitem>
        <listitem>
          <para> A basic validation is performed after each save of the Activiti diagram and the
            errors are mentioned in the Eclipse problem view. <mediaobject>
              <imageobject>
                <imagedata align="center" fileref="images/designer.problem.view.png"/>
              </imageobject>
            </mediaobject>
          </para>
        </listitem>
        <listitem>
          <para> A basic deployment editor is available when right-clicking on an Activiti diagram
            in the package explorer. You see a Deployment property at the end of the pop-up items.
            The deployment editor currently supports saving a BAR file, and will be extended in the
            next release to also deploy the BAR file to the Activiti engine. <mediaobject>
              <imageobject>
                <imagedata align="center" fileref="images/designer.deployment.editor.png"/>
              </imageobject>
            </mediaobject>
          </para>
        </listitem>
      </itemizedlist>
    </para>
  </section>
  <section id="eclipseDesignerBPMNFeatures">
    <title>Activiti Designer BPMN features</title>
    <para>
      <itemizedlist>
        <listitem>
          <para> Support for start event, end event, sequence flow, parallel gateway, exclusive
            gateway, embedded subprocess, script task, user task, service task, mail task and manual
            tasks. <mediaobject>
              <imageobject>
                <imagedata align="center" fileref="images/designer.model.process.png"/>
              </imageobject>
            </mediaobject>
          </para>
        </listitem>
        <listitem>
          <para> Java class or expression configuration is supported for the Java service task. In
            addition field extensions can be configured. <mediaobject>
              <imageobject>
                <imagedata align="center" fileref="images/designer.servicetask.property.png"/>
              </imageobject>
            </mediaobject>
          </para>
        </listitem>
        <listitem>
          <para> Support for additional Activiti extensions like the Mail task, the candidate
            configuration of User tasks and Script task configuration. <mediaobject>
              <imageobject>
                <imagedata align="center" fileref="images/designer.mailtask.property.png"/>
              </imageobject>
            </mediaobject>
          </para>
        </listitem>
        <listitem>
          <para> Support for conditions on sequence flows. <mediaobject>
              <imageobject>
                <imagedata align="center" fileref="images/designer.sequence.condition.png"/>
              </imageobject>
            </mediaobject>
          </para>
        </listitem>
      </itemizedlist>
    </para>
  </section>
  <section>
    <title>Extending Activiti Designer</title>
    <para>You can extend the default functionality offered by Activiti Designer. This section
      documents which extensions are available, how they can be used and provides some usage
      examples. Extending Activiti Designer is useful in cases where the default functionality
      doesn't suit your needs, you require additional capabilities or have domain specific
      requirements when modelling business processes. Extension of Activiti Designer falls into two
      distinct categories, extending the palette and extending output formats. Each of these
      extension ways requires a specific approach and different technical expertise.</para>
    <para>
      <note>
        <para>Extending Activiti Designer requires technical knowledge and more specifically,
          knowledge of programming in Java. Depending on the type of extension you want to create,
          you might also need to be familiar with Maven, Eclipse, OSGi, Eclipse extensions and
          SWT.</para>
      </note>
    </para>
    <section>
      <title>Customizing the palette</title>
      <para>You can customize the palette that is offered to users when modelling processes. The
        palette is the collection of shapes that can be dragged onto the canvas in a process diagram
        and is displayed to the right hand side of the canvas. As you can see in the default
        palette, the default shapes are grouped into compartments (these are called "drawers") for
        Events, Gateways and so on. There are two options built-in to Activiti Designer to customize
        the drawers and shapes in the palette:<itemizedlist>
          <listitem>
            <para>Adding your own shapes / nodes to existing or new drawers </para>
          </listitem>
          <listitem>
            <para>Disabling any or all of the default BPMN 2.0 shapes offered by Activiti Designer,
              with the exception of the connection and selection tools</para>
          </listitem>
        </itemizedlist></para>
      <para>In order to customize the palette, you create a JAR file that is added to a specific
        installation of Activiti Designer (more on <link linkend="applyingExtensionToDesigner">how
          to do that</link> later). Such a JAR file is called an <emphasis>extension</emphasis>. By
        writing classes that are included in your extension, Activiti Designer understands which
        customizations you wish to make. In order for this to work, your classes should implement
        certain interfaces. There is an integration library available with those interfaces and base
        classes to extend which you should add to your project's classpath. </para>
      <para>
        <note>
          <para>You can setup your project in whichever tool you prefer and build the JAR with your
            build tool of choice. For the instructions below, a setup is assumed with Eclipse
            Helios, using Maven (3.x) as build tool, but any setup should enable you to create the
            same results.</para>
        </note>
      </para>
      <section>
        <title>Extension setup (Eclipse/Maven)</title>
        <para>Download and extract <ulink url="http://www.eclipse.org/downloads">Eclipse</ulink>
          (Galileo or Helios should both work) and a recent version (3.x) of <ulink
            url="http://maven.apache.org/download.html">Apache Maven</ulink>. If you use a 2.x
          vesion of Maven, you will run into problems when building your project, so make sure your
          version is up to date. We assume you are familiar with using basic features and the Java
          editor in Eclipse. It's up to you whether your prefer to use Eclipse's features for Maven
          or run Maven commands from a command prompt.</para>
        <para>Create a new project in Eclipse. This can be a general project type. Create a
            <literal>pom.xml</literal> file at the root of the project to contain the Maven project
          setup. Also create folders for the <literal>src/main/java</literal> and
            <literal>src/main/resources</literal> folders, which are Maven conventions for your Java
          source files and resources respectively. Open the <literal>pom.xml</literal> file and add
          the following lines:</para>
        <para>
          <programlisting>&lt;project 
  xmlns="http://maven.apache.org/POM/4.0.0" 
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

	&lt;modelVersion>4.0.0&lt;/modelVersion>

	&lt;groupId>org.acme&lt;/groupId>
	&lt;artifactId>money-tasks&lt;/artifactId>
	&lt;version>1.0.0&lt;/version>
	&lt;packaging>jar&lt;/packaging>
	&lt;name>Acme Corporation Money Tasks&lt;/name>
...
&lt;/pom></programlisting>
        </para>
        <para>As you can see, this is just a basic pom.xml file that defines a
            <literal>groupId</literal>, <literal>artifactId</literal> and <literal>version</literal>
          for the project. We will create a customization that includes a single custom node for our
          money business.</para>
        <para>Add the integration library to your project's dependencies by including this
          dependency in your <literal>pom.xml</literal> file:</para>
        <para>
          <programlisting>&lt;dependencies>
	&lt;dependency>
		&lt;groupId>org.activiti.designer&lt;/groupId>
		&lt;artifactId>org.activiti.designer.integration&lt;/artifactId>
		&lt;version>&lt;!-- Current Activiti Designer Version -->&lt;/version>
		&lt;scope>compile&lt;/scope>
	&lt;/dependency>
&lt;/dependencies></programlisting>
        </para>
        <warning>
          <para>At the moment, the dependency is not available from the Activiti Maven repository.
            To use it, you should download it <ulink
              url="images/org.activiti.designer.integration-0.6.0.jar">from here</ulink> and place
            it in your local Maven repository.</para>
        </warning>
        <para>Finally, in the<literal> pom.xml</literal> file, add the configuration for the
            <literal>maven-compiler-plugin</literal> so the Java source level is at least 1.5 (see
          snippet below). You will need this in order to use annotations. You can also include
          instructions for Maven to generate the JAR's <literal>MANIFEST.MF</literal> file. This is
          not required, but you can use a specific property in the manifest to provide a name for
          your extension (this name may be shown at certain places in the designer and is primarily
          intended for future use if you have several extensions in the designer). If you wish to do
          so, include the following snippet in <literal>pom.xml</literal>: </para>
        <para>
          <programlisting>&lt;build>
	&lt;plugins>
        &lt;plugin>
			&lt;artifactId>maven-compiler-plugin&lt;/artifactId>
			&lt;configuration>
				&lt;source>1.5&lt;/source>
				&lt;target>1.5&lt;/target>
				&lt;showDeprecation>true&lt;/showDeprecation>
				&lt;showWarnings>true&lt;/showWarnings>
				&lt;optimize>true&lt;/optimize>
			&lt;/configuration>
		&lt;/plugin>
		&lt;plugin>
			&lt;groupId>org.apache.maven.plugins&lt;/groupId>
			&lt;artifactId>maven-jar-plugin&lt;/artifactId>
			&lt;version>2.3.1&lt;/version>
			&lt;configuration>
				&lt;archive>
					&lt;index>true&lt;/index>
					&lt;manifest>
						&lt;addClasspath>false&lt;/addClasspath>
						&lt;addDefaultImplementationEntries>true&lt;/addDefaultImplementationEntries>
					&lt;/manifest>
					&lt;manifestEntries>
						&lt;ActivitiDesigner-Extension-Name>Acme Money&lt;/ActivitiDesigner-Extension-Name>
					&lt;/manifestEntries>
				&lt;/archive>
			&lt;/configuration>
		&lt;/plugin>
	&lt;/plugins>
&lt;/build></programlisting>
        </para>
        <para>The name for the extension is described by the
            <literal>ActivitiDesigner-Extension-Name</literal> property. The only thing left to do
          now is tell Eclipse to setup the project according to the instructions in
            <literal>pom.xml</literal>. So open up a command shell and go to the root folder of your
          project in the Eclipse workspace. Then execute the following Maven command:</para>
        <para>
          <programlisting>mvn eclipse:eclipse</programlisting>
        </para>
        <para>Wait until the build is successful. Refresh the project (use the project's context
          menu (right-click) and select <literal>Refresh</literal>). You should now have the
            <literal>src/main/java</literal> and <literal>src/main/resources</literal> folders as
          source folders in the Eclipse project.</para>
        <note>
          <para>You can of course also use the <ulink url="http://www.eclipse.org/m2e"
              >m2eclipse</ulink> plugin and simply enable Maven dependency management from the
            context menu (right-click) of the project. Then choose <literal>Maven</literal> >
              <literal>Update project configuration</literal> from the project's context menu. That
            should setup the source folders as well. </para>
        </note>
        <para>That's it for the setup. Now you're ready to start creating customizations to Activiti
          Designer!</para>
      </section>
      <section id="applyingExtensionToDesigner">
        <title>Applying your extension to Activiti Designer</title>
        <para>You might be wondering how you can add your extension to Activiti Designer so your
          customizations are applied. These are the steps to do just that: <itemizedlist>
            <listitem>
              <para>Once you've created your extension JAR (for instance, by performing a mvn
                install in your project to build it with Maven), you need to transfer the extension
                to the computer where Activiti Designer is installed; </para>
            </listitem>
            <listitem>
              <para>Store the extension somewhere on the hard drive where it will be able to remain
                and remember the location;</para>
            </listitem>
            <listitem>
              <para>Start Activiti Designer and from the menu, select <literal>Window</literal> >
                  <literal>Preferences</literal>
              </para>
            </listitem>
            <listitem>
              <para>In the preferences screen, type <literal>user</literal> as keyword. You should
                see an option to access the <literal>User Libraries</literal> in Eclipse in the
                  <literal>Java</literal> section.</para>
              <para>
                <mediaobject>
                  <imageobject>
                    <imagedata align="center"
                      fileref="images/designer.preferences.userlibraries.png"/>
                  </imageobject>
                </mediaobject>
              </para>
            </listitem>
            <listitem>
              <para>Select the User Libraries item and a tree view shows up to the right where you
                can add libraries. You should see the default group where you can add extensions to
                Activiti Designer (depending on your Eclipse installation, you might see several
                others as well). </para>
              <para>
                <mediaobject>
                  <imageobject>
                    <imagedata align="center"
                      fileref="images/designer.preferences.userlibraries.activiti.empty.png"/>
                  </imageobject>
                </mediaobject>
              </para>
            </listitem>
            <listitem>
              <para>Select the <literal>Activiti Designer Extensions</literal> group and click the
                  <literal>Add JARs...</literal> button. Navigate to to folder where your extension
                is stored and select the extension file you want to add. After completing this, your
                preferences screen should show the extension as part of the <literal>Activiti
                  Designer Extensions</literal> group, as shown below.</para>
              <para>
                <mediaobject>
                  <imageobject>
                    <imagedata align="center"
                      fileref="images/designer.preferences.userlibraries.activiti.moneytasks.png"/>
                  </imageobject>
                </mediaobject>
              </para>
            </listitem>
            <listitem>
              <para>Click the <literal>OK</literal> button to save and close the preferences dialog.
                The <literal>Activiti Designer Extensions</literal> group is automatically added to
                new Activiti projects you create. You can see the user library as entry in the
                project's tree in the Navigator or Package Explorer. If you already had Activiti
                projects in the workspace, you should also see the new extensions show up in the
                group. An example is shown below.</para>
              <para>
                <mediaobject>
                  <imageobject>
                    <imagedata align="center" fileref="images/designer.userlibraries.project.png"/>
                  </imageobject>
                </mediaobject>
              </para>
            </listitem>
          </itemizedlist></para>
        <para>Diagrams you open will now have the shapes from the new extension in their palette (or
          shapes disabled, depending on the customizations in your extension). If you already had a
          diagram opened, close and reopen it to see the changes in the palette.</para>
      </section>
      <section>
        <title>Adding shapes to the palette</title>
        <para>With your project set up, you can now easily add shapes to the palette. Each shape you
          wish to add is represented by a class in your JAR. Take note that these classes are not
          the classes that will be used by the Activiti engine during runtime. In your extension you
          describe the properties that can be set in Activiti Designer for each shape. From these
          shapes, your refer to the runtime class that should be used by the engine. This class
          should implement JavaDelegation as for any ServiceTask in Activiti.</para>
        <para>A shape's class is a simple Java class, to which a number of annotations are added.
          The class should implement the <literal>CustomServiceTask</literal> interface, but you
          shouldn't implement this interface yourself. Extend the
            <literal>AbstractCustomServiceTask</literal> base class instead (at the moment you MUST
          extend this class directly, so no abstract classes in between). In the Javadoc for that
          class you can find instructions on the defaults it provides and when you should override
          any of the methods it already implements.</para>
        <para>
          <programlisting>/**
 * @author John Doe
 * @version 1
 * @since 1.0.0
 */
public class AcmeMoneyTask extends AbstractCustomServiceTask {
...
}</programlisting>
        </para>
        <para>You will need to implement the <literal>getName()</literal> method to determine the
          name the node will have in the palette. You can also put the nodes in their own drawer and
          provide an icon. Override the appropriate methods from
            <literal>AbstractCustomServiceTask</literal>. If you want to provide an icon, make sure
          it's in the <literal>src/main/resources</literal> package in your JAR. The path you supply
          is relative to that folder.</para>
        <para>You can add properties to the shape by adding members to the class and annotating them
          with the <literal>@Property</literal> annotation like this:</para>
        <para>
          <programlisting>@Property(type = PropertyType.TEXT, displayName = "Account Number")
@Help(displayHelpShort = "Provide an account number", displayHelpLong = HELP_ACCOUNT_NUMBER_LONG)
private String accountNumber;</programlisting>
        </para>
        <para>At the moment, there are just two <literal>PropertyType</literal> values you can use,
            <literal>TEXT</literal> and <literal>MULTILINE_TEXT</literal>. Future releases will
          allow you to use other types. You can make a field required by setting the required
          attribute to true. A message and red background will appear if the user doesn't fill out
          the field.</para>
        <para>As you can see, there's also an <literal>@Help</literal> annotation that's used to
          provide the user some guidance when filling out the field. You can also use the
            <literal>@Help</literal> annotation on the class itself - this information is shown at
          the top of the property sheet presented to the user.</para>
        <para>Below is the listing for a further elaboration of the <literal>MoneyTask</literal>. A
          comment field has been added and you can see an icon is included for the node.</para>
        <para>
          <programlisting>/**
 * @author John Doe
 * @version 1
 * @since 1.0.0
 */
@Runtime(delegationClass = "org.acme.runtime.AcmeMoneyJavaDelegation")
@Help(displayHelpShort = "Creates a new account", displayHelpLong = "Creates a new account using the account number specified")
public class AcmeMoneyTask extends AbstractCustomServiceTask {

	private static final String HELP_ACCOUNT_NUMBER_LONG = "Provide a number that is suitable as an account number.";

	@Property(type = PropertyType.TEXT, displayName = "Account Number", required = true)
	@Help(displayHelpShort = "Provide an account number", displayHelpLong = HELP_ACCOUNT_NUMBER_LONG)
	private String accountNumber;

	@Property(type = PropertyType.MULTILINE_TEXT, displayName = "Comments")
	@Help(displayHelpShort = "Provide comments", displayHelpLong = "You can add comments to the node to provide a brief description.")
	private String comments;

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.activiti.designer.integration.servicetask.AbstractCustomServiceTask #contributeToPaletteDrawer()
	 */
	@Override
	public String contributeToPaletteDrawer() {
		return "Acme Corporation";
	}

	@Override
	public String getName() {
		return "Money node";
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.activiti.designer.integration.servicetask.AbstractCustomServiceTask #getSmallIconPath()
	 */
	@Override
	public String getSmallIconPath() {
		return "icons/coins.png";
	}
}</programlisting>
        </para>
        <para>If you extend Activiti Designer with this shape, The palette and corresponding node
          will look like this:</para>
        <para>
          <mediaobject>
            <imageobject>
              <imagedata align="center" fileref="images/designer.palette.add.money.png"/>
            </imageobject>
          </mediaobject>
        </para>
        <para>The properties screen for the money task is shown below. Note the required message for
          the <literal>accountNumber</literal> field.</para>
        <para>
          <mediaobject>
            <imageobject>
              <imagedata align="center"
                fileref="images/designer.palette.add.money.properties.required.png"/>
            </imageobject>
          </mediaobject>
        </para>
        <para>The help for fields is offered by the buttons to the right of each property. Clicking
          on the button shows a popup as displayed below.</para>
        <para>
          <mediaobject>
            <imageobject>
              <imagedata align="center" fileref="images/designer.palette.add.money.help.png"/>
            </imageobject>
          </mediaobject>
        </para>
        <para>The final step for your shape is to indicate the class that is instantiated by the
          Activiti engine when it reaches your node when executing a process instance. To do this,
          you use the <literal>@Runtime</literal> annotation. The <literal>delegationClass</literal>
          attribute you return should contain the canonical name of the runtime class. Note that the
          runtime class shouldn't be in your extension JAR, as it's dependent on the Activiti
          libraries.</para>
        <para>
          <programlisting>@Runtime(delegationClass = "org.acme.runtime.AcmeMoneyJavaDelegation")</programlisting>
        </para>
      </section>
      <section>
        <title>Disabling default shapes in the palette</title>
        <para>This customization requires you to include a class in your extension that implements
          the <literal>DefaultPaletteCustomizer</literal> interface. You should not implement this
          interface directly, but subclass the <literal>AbstractDefaultPaletteCustomizer</literal>
          base class. Currently, this class provides no functionality, but future versions of the
            <literal>DefaultPaletteCustomizer</literal> interface will offer more capabilities for
          which this base class will provide some sensible defaults so it's best to subclass so your
          extension will be compatible with future releases. </para>
        <para>Extending the <literal>AbstractDefaultPaletteCustomizer</literal> class requires you
          to implement one method, <literal>disablePaletteEntries()</literal>, from which you must
          return a list of <literal>PaletteEntry</literal> values. For each of the default shapes,
          you can disable it by adding its corresponding <literal>PaletteEntry</literal> value to
          your list. Note that if you remove shapes from the default set and there are no remaining
          shapes in a particular drawer, that drawer will be removed from the palette in its
          entirety. If you wish to disable all of the default shapes, you only need to add
            <literal>PaletteEntry.ALL</literal> to your result. As an example, the code below
          disables the Manual task and Script task shapes in the palette.</para>
        <para>
          <programlisting>public class MyPaletteCustomizer extends AbstractDefaultPaletteCustomizer {

	/*
	 * (non-Javadoc)
	 *
	 * @see org.activiti.designer.integration.palette.DefaultPaletteCustomizer#disablePaletteEntries()
	 */
	@Override
	public List&lt;PaletteEntry> disablePaletteEntries() {
		List&lt;PaletteEntry> result = new ArrayList&lt;PaletteEntry>();
		result.add(PaletteEntry.MANUAL_TASK);
		result.add(PaletteEntry.SCRIPT_TASK);
		return result;
	}

}</programlisting>
        </para>
        <para>The result of applying this extension is shown in the picture below. As you can see,
          the manual task and script task shapes are no longer available in the
            <literal>Tasks</literal> drawer.</para>
        <para>
          <mediaobject>
            <imageobject>
              <imagedata align="center"
                fileref="images/designer.palette.disable.manual.and.script.png"/>
            </imageobject>
          </mediaobject>
        </para>
        <para>To disable all of the default shapes, you could use something similar to the code
          below.</para>
        <para>
          <programlisting>public class MyPaletteCustomizer extends AbstractDefaultPaletteCustomizer {

	/*
	 * (non-Javadoc)
	 *
	 * @see org.activiti.designer.integration.palette.DefaultPaletteCustomizer#disablePaletteEntries()
	 */
	@Override
	public List&lt;PaletteEntry> disablePaletteEntries() {
		List&lt;PaletteEntry> result = new ArrayList&lt;PaletteEntry>();
		result.add(PaletteEntry.ALL);
		return result;
	}

}</programlisting>
        </para>
        <para>The result will look like this (notice that the drawers the default shapes were in are
          no longer in the palette):</para>
        <para>
          <mediaobject>
            <imageobject>
              <imagedata align="center" fileref="images/designer.palette.disable.all.png"/>
            </imageobject>
          </mediaobject>
        </para>
      </section>
    </section>
    <section>
      <title>Exporting to custom output formats</title>
      <para>You can extend Activiti Designer to publish to additional formats when saving diagrams.
        These extensions are called <literal>Export Marshallers</literal> and are invoked
        automatically by Activiti Designer on each save action by the user. This behavior can be
        enabled or disabled by setting a preference in Eclipse's preferences dialog for each format
        to be saved.</para>
      <para>You can compare these extensions to the BPMN 2.0 export and process image saving that's
        performed during save actions by default in Activiti Designer. In fact, these functions use
        exactly the same extension features you can use to save to your own formats.</para>
      <para>To create an <literal>Export Marshaller</literal>, you need to create a different kind
        of extension than for extending the palette. The reason for this is simple: from your code
        you will need access to more APIs than are offered by the integration library. In
        particular, you will need classes that are available in Eclipse itself. The way to implement
        an <literal>Export Marshaller</literal> is therefore to create an Eclipse plugin (which you
        can do by using Eclipse's PDE support) and package it in a custom Eclipse product. It's
        beyond the scope of this user guide to explain all the details involved in developing
        Eclipse plugins, so the instructions below are limited to the functionality for extending
        Activiti Designer.</para>
      <para>Your bundle should be dependent on the following libraries:</para>
      <para>
        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="images/designer.export.dependencies.png"/>
          </imageobject>
        </mediaobject>
      </para>
      <para>Create an extension to the
          <literal>org.activiti.designer.eclipse.extension.export.ExportMarshaller</literal>
        extension point. For this extension point, you are required to subclass the
          <literal>AbstractExportMarshaller</literal> class. This abstract base class provides you
        with a number of useful methods when marshalling to your own format, such as adding markers
        to Eclipse's problems view and saving resources to the workspace. </para>
      <para>You are required to implement some methods, such as
          <literal>getMarshallerName()</literal> and <literal>getFormatName()</literal>. These
        methods are used to display options to the user and to show information in progress dialogs,
        so make sure the descriptions you return reflect the functionality you are implementing. </para>
      <para>The bulk of your work is performed in the <literal>marshallDiagram(Diagram diagram,
          IProgressMonitor monitor)</literal> method. You are provided with the diagram object,
        which contains all of the information about the objects in the diagram (BPMN constructs) and
        the graphical representation. If you want to access the diagram through its resource in
        Eclipse or you want to transform the diagram using XSLT, there are methods to get to
          <literal>Resources</literal> and <literal>InputStreams</literal> for the diagram in the
          <literal>AbstractExportMarshaller</literal> class.</para>
      <para>It's probably a good idea to invoke <literal>clearProblems()</literal> as one of the
        first things you do; this will clear any previous markers for your marshaller. You should
        also use the progress monitor provided to report your progress back to the user. If you need
        examples on how to do this, take a look at the code of Activiti Designer itself.</para>
    </section>
  </section>
</chapter>
