<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "../../../target/docbook-tool-1.0/docbook-xml/docbookx.dtd">

<chapter id="history">

  <title>History</title>
  
  <para>History is the component that captures what happened
  during process execution and stores it permanently.  In contrast to the runtime data, 
  the history data will remain present in the DB also after process instances have completed.
  </para>
  <para>There are 3 history entities: <literal>HistoricProcessInstance</literal>s containing 
  information about current and past process instances, <literal>HistoricActivityInstance</literal>s 
  containing information about a single execution of an activity and <literal>HistoricDetail</literal> 
  containing various kinds of information related to either a historic process instances or an activity instance.
  </para>
  
  <para>Since the DB contains historic entities for past as well as ongoing instances, you might want to consider 
  querying these tables in order to minimize access to the runtime process instance data 
  and that way keeping the runtime execution performant.
  </para>
  <para>Later on, this information will be exposed in Activiti Explorer and Activiti Probe.
  Also, it will be the information from which the reports will be generated.
  </para>
  
  <section id="historyQuery">
    <title>Querying history</title>
  <para>In the API, the HistoryService exposes this information by offering methods 
  <literal>createHistoricProcessInstanceQuery</literal>, <literal>createHistoricActivityInstanceQuery</literal>
  and <literal>createHistoricDetailQuery</literal>.
  </para>
  <para>Below are a couple of examples that show some of the possibilities of the query API for history.</para>
  <para>
  Get 10 <literal>HistoricProcessInstances</literal> that are finished and which took the most time to complete (they have the longest duration).
  <programlisting>
historyService.createHistoricProcessInstanceQuery()
  .finished()
  .orderByProcessInstanceDuration().desc()
  .listPage(0, 10);
  </programlisting>
  Get the last userTask that has been finished in any process that uses the processDefinition with id XXX.
  <programlisting>
historyService.createHistoricActivityInstanceQuery()
  .activityType("userTask")
  .processDefinitionId("XXX")
  .finished()
  .orderByHistoricActivityInstanceEndTime().desc()
  .listPage(0, 1);
  </programlisting>
    Gets all variable-updates that have been done on activity with id 123. Only <literal>HistoricVariableUpdate</literal>s will be returned by this query.
  <programlisting>
historyService.createHistoricDetailQuery()
  .variableUpdates()
  .activityId("123")
  .orderByVariableName().asc()
  .list()
  </programlisting>
  </para>
</section>
  <section id="historyConfig">
    <title>History configuration</title>
	  <para>The history level can be confugured programatically, using the <literal>HISTORY_*</literal>constants defined on <literal>ProcessEngineConfiguration</literal>:</para>
      <programlisting>
ProcessEngine processEngine = ProcessEngineConfiguration
  .createProcessEngineConfigurationFromResourceDefault()
  <emphasis role="bold">.setHistory(ProcessEngineConfiguration.HISTORY_AUDIT)</emphasis>
  .buildProcessEngine();
      </programlisting>
      
      <para>The level can also be configured in activiti.cfg.xml or in a spring-context:</para>
	  
	  <programlisting>&lt;bean id=&quot;processEngineConfiguration&quot; class=&quot;org.activiti.engine.impl.cfg.StandaloneInMemProcessEngineConfiguration&quot;&gt;
  &lt;property name=&quot;history&quot; value=&quot;audit&quot; /&gt;
  ...
&lt;/bean&gt;</programlisting>
	  
	  <para>Following history levels can be configured:
	  </para>
	  
	  <itemizedlist>
	    <listitem><para><literal>none</literal>: skips all history archiving.  This is the most performant for runtime 
	    process execution, but no historical information will be available. </para></listitem>
	    <listitem><para><literal>activity</literal>: archives all process instances and activity instances. 
	    No details will be archived</para></listitem>
	    <listitem><para><literal>audit</literal>: This is the default.  It archives all process instances, 
	    activity instances and all form properties that are submitted so that all user interaction 
	    through forms is traceable and can be audited.</para></listitem>
	    <listitem><para><literal>full</literal>: This is the highest level of history archiving and hence the 
	    slowest.  This level stores all information as in the <literal>audit</literal> level 
	    plus all other possible details like process variable updates.</para></listitem>
	  </itemizedlist>
  </section>
  
  <section id="historyFormAuditPurposes">
    <title>History for audit purposes</title>
    
    <para>When <link linkend="historyConfig">configuring</link> at least <literal>audit</literal> level
    for configuration. Then all properties submitted through methods 
    <literal>FormService.submitStartFormData(String processDefinitionId, Map&lt;String, String&gt; properties)</literal>
    and <literal>FormService.submitTaskFormData(String taskId, Map&lt;String, String&gt; properties)</literal>
    are recorded.
    </para>

    <para><emphasis role="bold">[KNOWN LIMITATION]</emphasis> Currently the forms as worked out in Activiti Explorer
    do not yet use the <literal>submitStartFormData</literal> and <literal>submitTaskFormData</literal>.
    So the form properties are not yet archived when using the forms in Activity Explorer. A workaround is to set the historyLevel to full and use the variableUpdates to see what values were set in userTasks.
    @see <ulink url="http://jira.codehaus.org/browse/ACT-294">ACT-294</ulink>
    </para>
    
    <para>Form properties can be retrieved with the query API like this:</para>
    
    <programlisting>historyService
      .createHistoricDetailQuery()
      .onlyFormProperties()
      ...
      .list();</programlisting>
      
    <para>In that case only historic details of type <literal>HistoricFormProperty</literal> are returned.
    </para>
    
    <para>If you've set the authenticated user before calling the submit methods with
    <literal>IdentityService.setAuthenticatedUserId(String)</literal> then that authenticated user 
    who submitted the form will be accessible in the history as well with
    <literal>HistoricProcessInstance.getStartUserId()</literal> for start forms and 
    <literal>HistoricActivityInstance.getAssignee()</literal> for task forms.
    </para>
    
  </section>
  
</chapter>