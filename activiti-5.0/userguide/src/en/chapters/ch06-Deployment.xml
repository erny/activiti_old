<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "../../../target/docbook-tool-1.0/docbook-xml/docbookx.dtd">

<chapter id="chDeployment">
  <title>Deployment</title>

  <section>
    <title>Business archives</title>
    <para>To deploy processes, they have to be wrapped in a business archive.  A business archive is the unit 
    of deployment to an Activiti Engine.  Basically a business archive is equivalent to a zip file.  It can contain 
    BPMN 2.0 processes, task forms, rules and any other type of file.  In general, a business archive 
    contains a collection of named resources.  
    </para>
    <para>When a business archive is deployed, it is scanned for BPMN files with a <literal>.bpmn20.xml</literal> extension.
    Each of those will be parsed and potentially contains multiple process definitions.  
    </para>
    <para>
      Note that Java classes present in the business archive <emphasis role="bold">will not be added to the classpath.</emphasis> All custom classes used in process definitions in the business archive (for example Java service tasks or event listener implementations) should be present
      on the activiti-engine's classpath in order to run the processes. 
    </para>
  </section>
  
  <section>
    <title>Java classes</title>
    <para>All custom classes that are used in your process (eg. JavaDelegates used in servicetaks or event-listeners, TaskListeners, ...) should be present on the engine's classpath when an instance of the process is started.
    It's not nessecairy to have those classes on the classpath when deploying the process-definition into the engine.
    </para>
    <para>
    When you are using the demo setup and you want to add your custom classes, you should add a jar containing your classes to the activiti-rest webapp lib. Don't forget to include the dependencies of your custom classes (if any) as wel. 
    This is the same location where the activiti-engine jar is located. You can find this folder inside your distro at the folowing location: 
    </para>
    <para>
    <programlisting>${activiti distro}/apps/apache-tomcat-6.0.29/webapps/activiti-rest/lib/</programlisting>
    </para>
  </section>
  
  <section>
    <title>Deploying with Activiti Probe</title>
    <para>In <link linkend="probeDeployments">page 'Deployments' in Activiti Probe</link>, you can upload a
    business archive to deploy it in the Activiti Engine.  
    </para>
  </section>
  
  <section>
    <title>Deploying programmatically</title>
    <para>Deploying a business archive from a zip file can be done like this: 
    </para>
    <programlisting>String barFileName = "path/to/process-one.bar";
ZipInputStream inputStream = new ZipInputStream(new FileInputStream(barFileName));
    
repositoryService.createDeployment()
    .name("process-one.bar")
    .addZipInputStream(inputStream)
    .deploy();
</programlisting>
    <para>It's also possible to build a deployment from individual resources. 
    See javadocs for more details.</para>
  </section>
  
  <section>
    <title>Deploying with ant</title>
    <para>To deploy a business archive with ant, first the <literal>deploy-bar</literal> task 
    needs to be defined.  Make sure that the configuration jar is on the classpath, as well as the 
    Activiti jar and all its dependencies:</para>
    <programlisting>&lt;taskdef name=&quot;deploy-bar&quot; classname=&quot;org.activiti.engine.impl.ant.DeployBarTask&quot;&gt;
  &lt;classpath&gt;
    &lt;fileset dir=&quot;...&quot;&gt;
      &lt;include name=&quot;activiti-cfg.jar&quot;/&gt;
      &lt;include name=&quot;your-db-driver.jar&quot;/&gt;
    &lt;/fileset&gt;
    &lt;fileset dir=&quot;${activiti.home}/lib&quot;&gt;
      &lt;include name=&quot;activiti-engine-${activiti.version}.jar&quot;/&gt;
      &lt;include name=&quot;ibatis-sqlmap-*.jar&quot;/&gt;
    &lt;/fileset&gt;
  &lt;/classpath&gt;
&lt;/taskdef&gt;
&lt;deploy-bar file=&quot;.../yourprocess.bar&quot; /&gt;</programlisting>
  </section>
  <section>
    <title>Deploying with Activiti Probe</title>
    <para>It's possible to deploy process definitions through probe, this is described in <link linkend="probeDeployments">Activiti Probe - Deployments</link>.</para>  
  </section>
  
  <section id="versioningOfProcessDefinitions">
    <title>Versioning of process definitions</title>
    <para>BPMN doesn't have a notion of versioning.  And that is good because the executable BPMN process 
    file will probably live in an SVN repository as part of your development project.  Versions of process definitions
    are created during deployment. During deployment, Activiti will assign a version to the <literal>ProcessDefinition</literal> 
    before it is stored in the Activiti DB.
    </para>
    <para>For each process definition in a business archive the following steps are performed to 
    initialize the properties <literal>key</literal>, <literal>version</literal>, <literal>name</literal> and <literal>id</literal>:
    </para>
    <itemizedlist>
      <listitem><para>The process <literal>id</literal> attribute is used as the process definition <literal>key</literal> property</para></listitem>
      <listitem><para>The process <literal>name</literal> attribute is used as the process definition <literal>name</literal> property.
        If the name attribute is not specified, then id attribute is used as the name.
      </para></listitem>
      <listitem><para>The first time a process with a particular key is deployed, version 1 is assigned.  For all subsequent deployments of
      process definitions with the same key, the version will be set 1 higher then the max currently deployed version.  The key property
      is used to distinct process definitions.</para></listitem>
      <listitem><para>The id property is set to {processDefinitionKey}:{processDefinitionVersion}</para></listitem>
    </itemizedlist>
  </section>

</chapter>
