<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "../../../target/docbook-tool-1.0/docbook-xml/docbookx.dtd">

<chapter>
  <title>Getting Started</title>
  
  <section id="demo.setup">
    <title>Demo setup</title>
    <para>Setup is an ant script located in directory <literal>setup</literal> that helps you get up and running with Activiti quickly.
    </para>
    <para>To run the script, you'll need a working 
    <ulink url="http://java.sun.com/javase/downloads/index.jsp">Java runtime</ulink> and
    <ulink url="http://ant.apache.org/bindownload.cgi">Ant</ulink> installation.
    Also make sure that the <emphasis>JAVA_HOME</emphasis> and <emphasis>ANT_HOME</emphasis> system
    variables are correctly set. The way to do this depends on your operating system, but the
    <ulink url="http://ant.apache.org/manual/install.html">manual of ant</ulink> gives a description
    on how to do this. The demo setup script is tested with Ant 1.7.1.
    </para>
    <para>To configure setup for your environment, update property files <literal>build.properties</literal> 
    and <literal>build.{your-database}.properties</literal> .  Check those files for more information on 
    configurable properties and potential values.
    </para>
    <para>The easiest target to get started is open a command prompt in de <literal>setup</literal> folder 
    and type:
    </para>
    <programlisting>ant demo.start</programlisting>
    <para>This target will start tomcat and if you're using h2, it will also start the h2 database.
    The first time when that is executed, it will also perform the installation:  
    </para>
    <itemizedlist>
      <listitem><para>(*) Build the webapps.  All libraries are stored in <literal>${actviti.home}/setup/files/dependencies/libs</literal>
        The webapps without the libs are stored in <literal>${actviti.home}/setup/files/webapps</literal>. Building the webapps means that
        webapps are combined with the necessary libraries in <literal>${actviti.home}/setup/build/webapps</literal> 
      </para></listitem>
      <listitem><para>(*) Install the H2 in ${activiti.home}/apps/h2.  This only happens if you're using h2 as your database.  
        H2 is the default database.</para></listitem>
      <listitem><para>Start the H2 database.  Again, this is only done if using h2 as the database.  If you're using 
        a different database it is assumed that it is already up and running.</para></listitem>
      <listitem><para>(*) Create the Activiti tables in the database</para></listitem>
      <listitem><para>(*) Insert the demo users and groups in the Activiti identity tables (see below)</para></listitem>
      <listitem><para>(*) Deploy the example processes to the Activiti Engine DB</para></listitem>
      <listitem><para>(*) Download Tomcat if not available in the ${downloads.dir}</para></listitem>
      <listitem><para>(*) Install Tomcat in ${activiti.home}/apps/apache-tomcat-${tomcat.version}</para></listitem>
      <listitem><para>(*) Create an Activiti configuration jar</para></listitem>
      <listitem><para>(*) Deploy the REST interface webapp into tomcat</para></listitem>
      <listitem><para>(*) Download the Activiti Modeler webapp to ${activiti.home}/webapps</para></listitem>
      <listitem><para>(*) Deploy the Probe, Explorer and Modeler webapps into tomcat.</para></listitem>
      <listitem><para>Start tomcat</para></listitem>
    </itemizedlist>
    <para>(*) only performed the first time when running <literal>ant demo.start</literal> </para>
    <para>After running this target H2 and Tomcat will be running in the background.  To stop those 
    processes run <literal>ant demo.stop</literal>.</para>
    <para>The other targets in that build script can also be called individually and they will take the 
    configurable properties into account. Run <literal>ant -p</literal> for more details.
    </para>
    <para>These are the demo users:</para>
    <table>
      <title>The demo users</title>
      <tgroup cols='3'>
        <thead>
          <row>
            <entry>UserId</entry>
            <entry>Password</entry>
            <entry>Security roles</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>kermit</entry>
            <entry>kermit</entry>
            <entry>admin</entry>
          </row>
          <row>
            <entry>gonzo</entry>
            <entry>gonzo</entry>
            <entry>manager</entry>
          </row>
          <row>
            <entry>fozzie</entry>
            <entry>fozzie</entry>
            <entry>user</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    
    <para>Now you can access following web applications:</para>
    <table>
      <title>The webapp tools</title>
      <tgroup cols='3'>
        <thead>
          <row>
            <entry>Webapp Name</entry>
            <entry>URL</entry>
            <entry>Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>Activiti Probe</entry>
            <entry><ulink url="http://localhost:8080/activiti-probe">http://localhost:8080/activiti-probe</ulink> </entry>
            <entry>The admin management console.  Use this tool to see if the configured process engine is 
            correctly initialized, DB tables contents.
            </entry>
          </row>
          <row>
            <entry>Activiti Explorer</entry>
            <entry><ulink url="http://localhost:8080/activiti-explorer">http://localhost:8080/activiti-explorer</ulink> </entry>
            <entry>The process engine user console.  Use this tool to view your personal and candidate task lists and to 
            complete tasks.
            </entry>
          </row>
          <row>
            <entry>Activiti Cycle</entry>
            <entry><ulink url="http://localhost:8080/activiti-cycle">http://localhost:8080/activiti-cycle</ulink> </entry>
            <entry>The process cycle layer. Use this to browse repositories, execute transformations between model formats.
            </entry>
          </row>
          <row>
            <entry>Activiti Modeler powered by Signavio</entry>
            <entry><ulink url="http://localhost:8080/activiti-modeler">http://localhost:8080/activiti-modeler</ulink></entry>
            <entry>The web based process designer tool.  Use this tool to graphically author BPMN 2.0 compliant process definitions 
            files.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    
    <para>
      Note that the Activiti demo setup is a way of showing the capabilities and functionality of
      Activiti as easy and as fast as possible. This does however, <emphasis role="bold">not</emphasis> mean
      that it is the only way of using Activiti. As Activiti is 'just a jar', it can 
      be embedded in any Java environment: with swing or on a Tomcat, JBoss, WebSphere, etc.
      Or you could very well choose to run Activiti as a typical, standalone BPM server.
      If it is possible in Java, it is possible with Activiti!
    </para>
  </section>
  
  <section id="examples">
    <title>Example projects in the workspace</title>
    <para>The distribution contains a workspace directory containing a couple of example java projects:
    </para>
    <itemizedlist>
      <listitem>
	      <para><emphasis role="bold">activiti-engine-examples</emphasis>: This set of 
	      examples show the most common usage of Activiti: BPMN process definitions 
	      and process executions are stored in a DB and the examples make use of 
	      the persistent API.</para>
	      <para>This project contains the eclipse project files, an ant build file 
	      and a maven pom file.  The ant build file is independent of the maven pom.  Both
	      are there to show how you can use ant and maven respectively for building and deploying processes
	      as part of your build.
	      </para>
      </listitem>
      <listitem><para><emphasis role="bold">activiti-spring-examples</emphasis>: These examples
      show how you can use the Activiti Engine in a Spring environment.    
      </para></listitem>
      <listitem><para><emphasis role="bold">activiti-groovy-examples</emphasis>: These examples
      show the library dependencies for groovy and an example process with groovy scripting.    
      </para></listitem>
      <listitem><para><emphasis role="bold">activiti-jpa-examples</emphasis>: These examples
      show library dependencies and how you can work with JPA in Activiti.    
      </para></listitem>
      <listitem><para><emphasis role="bold">activiti-cycle-examples</emphasis>: This is a 
      project containing an demo example project for Activiti Cycle 
      </para></listitem>
      <listitem><para><emphasis role="bold">activiti-modeler-examples</emphasis>: This is a 
      file based model repository to which the Activiti Modeler is configured in the 
      demo setup. 
      </para></listitem>
    </itemizedlist>
    <para>To put all the appropriate library dependencies in place in those example projects, 
    run this command in the setup:
    </para>
    <programlisting>ant build.examples</programlisting>
    <para>Once you've done that the <literal>activiti-engine-examples</literal> and 
    <literal>activiti-spring-examples</literal> will contain <literal>libs-runtime</literal>
    and <literal>libs-test</literal> directories containing the runtime dependency jars and 
    test time dependency jars respectively.</para>
    <para>All the libs are located in <literal>setup/files/dependencies/libs</literal> 
    And the files <literal>setup/files/dependencies/libs.*.txt</literal> document 
    which libraries you need in different situations.  The <literal>build.dependencies</literal>
    ant target uses these files to put the right libraries in place in the workspace 
    example projects.
    </para>
  </section>
  
  <section id="librarydependencies">
    <title>Library dependencies</title>
  </section>
  
  <section id="eclipsesetup">
    <title>Eclipse setup</title>
    <para>To run the examples in your eclipse, follow these simple instructions.
    We'll start with creating the <literal>activiti-engine-examples</literal></para>
    <para>Create a new Java project</para>
    <mediaobject><imageobject><imagedata align="center" fileref="images/eclipsesetup.create.new.java.project.png"/></imageobject></mediaobject>
    <para>Select <literal>Create project from existing source</literal> and click <literal>Browse</literal> </para>
    <mediaobject><imageobject><imagedata align="center" fileref="images/eclipsesetup.browse.for.sources.png"/></imageobject></mediaobject>
    <para>Then select the directory <literal>${activiti.home}/examples/activiti-engine-examples</literal> </para>
    <mediaobject><imageobject><imagedata align="center" fileref="images/eclipsesetup.select.directory.png"/></imageobject></mediaobject>
    <para>Then you can click <literal>Finish</literal> in the New Java Project dialog and you're all set.</para>
    <para>Repeat this for the other projects <literal>${activiti.home}/examples/activiti-spring-examples</literal> and 
    <literal>${activiti.home}/examples/activiti-pvm-examples</literal></para>
    <para>If you want to browse the Activiti source code, then you can attach the sources 
    (e.g. <literal>${activiti.home}/lib/activiti-engine-5.0.beta2-sources.jar</literal>) to the library 
    in your project <literal>Java Build Path</literal> configuration.
    </para>
    <para>If you want BPMN 2.0 XML auto-completion and validation while typing, you can add the BPMN 2.0
      XML Schema to the XML catalog. Go to <literal>Preferences --> XML --> XML Catalog --> Add</literal>, 
      and select the XML Schema from the file system in the folder <literal>docs/xsd/BPMN20.xsd</literal>.
      <mediaobject><imageobject><imagedata align="center" fileref="images/eclipse.setup.xml.catalog.png"/></imageobject></mediaobject>
    </para>
    <para>TODO: REFACTOR THIS! Similarly, it is possible to add the XSD schema for the Activiti configuration file
    to the Eclipse XML catalog in the exact same way. The file that should be referenced
    is the <literal>docs/xsd/activiti-cfg-5.0.xsd</literal></para>
  </section>
  
  <section id="inspecting.database">
    <title>Inspecting the database</title>
    <para>
      To check out the database while trying out the demo setup, run the following Ant target 
      in the <emphasis>setup</emphasis> folder:
      <programlisting>ant h2.console.start</programlisting>
      This will boot the H2 web console. Note that the Ant target doesn't return, so a <emphasis>'CTRL + C'</emphasis>
      is required to shutdown the console.
      Fill in the following URL in the <emphasis>JDBC URL</emphasis> field
      and click connect:
      <programlisting>jdbc:h2:tcp://localhost/activiti</programlisting>
      <mediaobject><imageobject><imagedata align="center" fileref="images/h2.console.login.png"/></imageobject></mediaobject>
      You are now able to browse the Activiti database schema and check the content of the tables.
    </para>
  </section>
  
  <section>
    <title>Changing the database</title>
    <para>
      One of the things you probably want to do, is configuring the demo setup to
      use a different database. To do this, follow these steps
      <itemizedlist>
        <listitem>
          <para>
            Edit <literal>setup/build.properties</literal> and change the <literal>db</literal>
            parameter to your type of database (e.g. mysql).
          </para>
        </listitem>
        <listitem>
          <para>
            Edit <literal>setup/build.${db}.properties</literal> and change the 
            JDBC connection parameters to those of your database installation.
          </para>
        </listitem>
        <listitem>
          <para>
            Run <literal>'ant cfg.create'</literal> from within the <literal>setup</literal>
            folder.
          </para>
        </listitem>
        <listitem>
          <para>
            The generate configuration file can now be found in <literal>setup/build/activiti-cfg</literal>.
            Also, for convenience, a jar called <literal>activiti-cfg.jar</literal> containing the configuration file can be found in
            <literal>setup/build</literal> 
          </para>
        </listitem>
        <listitem>
          <para>
            This file must now be copied to <literal>/apps/apache-tomcat-6.x.x/webapps/activiti-rest/WEB-INF/lib</literal>.
            A reboot of Tomcat is required (<literal>ant demo.stop</literal> and <literal>ant demo.start</literal> in the <literal>setup</literal> folder).
          </para>
        </listitem>
      </itemizedlist>
    </para>
  </section>
  
   <section>
      <title>Using Oracle in the demo setup</title>
      <para>When you want to run the demo setup using oracle as datasource, an extra step is required BEFORE you call the ant target <literal>demo.setup</literal>. 
        <itemizedlist>
          <listitem>
            <para>
            Since we cannot redistribute the Oracle JDBC driver due to its licence, you should download it manually: 
          <ulink url="http://www.oracle.com/technetwork/database/enterprise-edition/jdbc-112010-090769.html">http://www.oracle.com/technetwork/database/enterprise-edition/jdbc-112010-090769.html</ulink>.
          Make sure you download ojdbc5.jar, version 11.2.0.1.
            </para>
          </listitem>
          <listitem>
            <para>
              Copy the jar to <literal>lib/provided/</literal>
            </para>
          </listitem>
          <listitem>
            <para>
              The only thing left to do is calling the following ant target, in the build-file located in <literal>/setup</literal>: 
              <programlisting>db.oracle.install.driver</programlisting>  
              The ant-target will actually install the jdbc-driver in the maven repository to be able to use it afterward, using the command:
              <programlisting>
install:install-file -Dfile=ojdbc5.jar -DgroupId=com.oracle.jdbc -DartifactId=ojdbc5 
   -Dpackaging=jar -Dversion=11.2.0.1.0 -DcreateChecksum=true -DgeneratePom=true
          </programlisting>
            </para>
          </listitem>
        </itemizedlist>
      </para>
    </section>

</chapter>
