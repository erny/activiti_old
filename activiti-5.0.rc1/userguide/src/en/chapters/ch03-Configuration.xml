<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "../../../target/docbook-tool-1.0/docbook-xml/docbookx.dtd">

<chapter>
  <title>Configuration</title>

  <para>Activiti configuration files should be generated with the setup ant script that can be found in the <emphasis>setup</emphasis> folder.
  The <literal>cfg.create</literal> target can be easily configured 
  in the <literal>setup/build.properties</literal> and the <literal>setup/build.${db}.properties</literal>.
  Our QA runs only the configurations that can be generated by the setup script.
  </para>  
  
  <section id="configurationproperties">
    <title>XML configuration file</title>
    <para>
    The Activiti process engine is configured through a xml file, by convention in this
    documentation and in the examples called <literal>activiti.cfg.xml</literal>.
    Note that this is only applicable if you're using the <literal>ProcessEngineBuilder</literal> directly or indirectly 
    through <literal>ProcessEngines</literal>. This is <emphasis role="bold">not</emphasis> applicable if you're 
    using <link linkend="springintegration">the Spring style of building a process engine</link>.
    The following snippet shows an example configuration. The following sections will
    give a detailed overview of each configuration element.
    <programlisting>
&lt;activiti-cfg process-engine-name=&quot;myProcessEngine&quot;&gt;

  &lt;database type=&quot;h2&quot; schema-strategy=&quot;create-if-necessary&quot;&gt;
    &lt;jdbc url=&quot;jdbc:h2:mem:activiti;DB_CLOSE_DELAY=1000&quot;
          driver=&quot;org.h2.Driver&quot;
          username=&quot;sa&quot;
          password=&quot;&quot; /&gt;
  &lt;/database&gt;

  &lt;job-executor activate=&quot;on&quot; /&gt;
  
  &lt;history level=&quot;audit&quot; /&gt;
  
  &lt;mail server=&quot;localhost&quot; port=&quot;5025&quot; /&gt;
  
&lt;/activiti-cfg&gt;
    </programlisting>
    </para> 
     
  </section>  
    
  <section id="configurationRoot">
    <title>Configuration root</title>
    <para>
      The <literal>activiti-cfg</literal> element is the root of the Activiti configuration.
      It supports following attributes:
      <itemizedlist>
        <listitem>
          <para>
            <emphasis role="bold">process-engine-name</emphasis>: The process engine name.  
            Relevant if you're using multiple process engines in one classloading scope.
          </para>
        </listitem>
      </itemizedlist>
    </para>
    <para>
      The <literal>activiti-cfg</literal> element can be enhanced with an optional 
      namespace declaration (useful for code completion). 
      <programlisting>
&lt;activiti-cfg xmlns=&quot;http://activiti.org/cfg&quot; 
              xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
              xsi:schemaLocation=&quot;http://activiti.org/cfg http://activiti.org/cfg/activiti-cfg-5.0.xsd&quot; /&gt;     
      </programlisting>
      See <link linkend="eclipsesetup">the Eclipse setup section (XML catalog configuration)</link> how to add the configuration schema to the Eclipse XML catalog. 
    </para>
  </section>
  
  <section id="databaseConfiguration">
    <title>Database configuration</title>
    <para>
      Configures the database that Activiti will use. Currently only supports configuration
      by passing the jdbc properties (datasource through JNDI will be supported soon).
      The database allows following attributes:
      <itemizedlist>
        <listitem>
          <para>
            <emphasis role="bold">type</emphasis>: indicates the type of database. This setting will
            determine which create/drop scripts and queries will be used. See 
            <link linkend="supporteddatabases">the ''supported databases' section</link> for 
            an overview of which types are supported.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">schema-strategy</emphasis>: { <literal>check-version</literal> | <literal>create-drop</literal> } <literal>check-version</literal> 
            is the default and it will check if the DB version is the same as the library version when the process engine is created.  <literal>create-drop</literal> is handy for 
            testing.  It creates the DB schema when the process engine is created and drops the schema when the engine is closed.
            Following values are <link linkend="experimental"><emphasis role="bold">[EXPERIMENTAL]</emphasis></link>:
            <itemizedlist>
              <listitem>
                <para><literal>create</literal>: creates schema when process engine starts.</para>
                <para><literal>create-if-necessary</literal>: creates schema when process engine starts, when the schema doesn't exist yet. Otherwise doesn't do anything.</para>
                <para><literal>drop-create</literal>: drops the schema when the process engine starts, and recreates a fresh schema. Useful in testing environments.</para>
              </listitem>
            </itemizedlist>
          </para>
        </listitem>
      </itemizedlist>
    </para>
    
    <para>
      The <emphasis role="bold">jdbc subelement</emphasis> supports setting the usual jdbc
      properties as the following attributes (all required):
      <itemizedlist>
        <listitem>
          <para>
            <emphasis role="bold">url</emphasis>: jdbc url of the database.
          </para>
        </listitem>
        <listitem>
           <para>
            <emphasis role="bold">driver</emphasis>: implementation of the driver for the specific databse type.
          </para>
        </listitem>
        <listitem>
           <para>
            <emphasis role="bold">username</emphasis>: username to connect to the database.
          </para>
        </listitem>
        <listitem>
           <para>
            <emphasis role="bold">password</emphasis>: password to connect to the database.
          </para>
        </listitem>
      </itemizedlist>
    </para>
    
    <para>
      By default, the datasource that is constructed based on the provided jdbc properties
      will have the default <ulink url="http://www.mybatis.org/">MyBatis</ulink> connection pool
      settings. Following attributes can optionally be set to tweak that connection pool (taken from the MyBatis documentation):
      <itemizedlist>
        <listitem>
          <para>
            <emphasis role="bold">max-activie</emphasis>: The number of active connections
            that the connection pool at maximum at any time can contain. Default is 10.
          </para>
        </listitem>
        <listitem>
           <para>
            <emphasis role="bold">max-idle</emphasis>: The number of idle connections
            that the connection pool at maximum at any time can contain.
          </para>
        </listitem>
        <listitem>
           <para>
            <emphasis role="bold">max-checkout</emphasis>: The amount of time in milliseconds a connection
            can be 'checked out' from the connection pool before it is forcefully returned.
            Default is 20000 (20 seconds).
          </para>
        </listitem>
        <listitem>
           <para>
            <emphasis role="bold">max-wait</emphasis>: This is a low level setting that gives the pool 
            a chance to print a log status and re-attempt the acquisition of a connection in the 
            case that itâ€™s taking unusually long (to avoid failing silently forever if the pool is misconfigured)
            Default is 20000 (20 seconds).
          </para>
        </listitem>
      </itemizedlist>
    </para>
    
    <para>
      Example database configuration:
      <programlisting>
&lt;database type=&quot;h2&quot; schema-strategy=&quot;create-if-necessary&quot;&gt;
  &lt;jdbc url=&quot;jdbc:h2:mem:activiti;DB_CLOSE_DELAY=1000&quot;
        driver=&quot;org.h2.Driver&quot;
        username=&quot;sa&quot;
        password=&quot;&quot; /&gt;
&lt;/database&gt;</programlisting>
    </para>
  </section>
  
  <section id="jobExecutorConfiguration">
    <title>Job executor configuration</title>
    <para> 
      Optional element. Only supports one attribute currently: <emphasis role="bold">activate</emphasis>, with possible values
      <literal>{on | off}</literal>. <literal>on</literal> is the  default which means that the JobExecutor 
      component will start when the process engine is created.  In testing, it's best to set this property to <literal>off</literal>.
      In that case, the job executor won't be activated and the test can manually search for jobs with <literal>ManagementService.createJobQuery</literal> and execute them 
      with <literal>ManagementService.executeJob</literal>.
    </para>
    
    <para>
      <programlisting>&lt;job-executor activate=&quot;on&quot; /&gt;</programlisting>
    </para>
  </section>
  
  <section id="mailServerConfiguration">
    <title>Mail server configuration</title>
    <para>
      Optional element. Activiti supports sending e-mails in business processes. To actually send an e-mail, a valid
      SMTP mail server configuration is required. The <emphasis role="mail">mail</emphasis>
      element supports following attributes:
      <itemizedlist>
        <listitem>
          <para>
            <emphasis role="bold">server</emphasis>: Server address of the SMTP mail server.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">port</emphasis>: Port of the SMTP mail server. By default port 25.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">username</emphasis>: Optional user name for secured SMTP mail servers.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">password</emphasis>: Optional password for secured SMTP mail servers.
          </para>
         </listitem>
        <listitem>
          <para>
            <emphasis role="bold">default-from</emphasis>: Process engine wide setting for the default mail address from
            which e-mail are sent in business processes. Process definitions
            can overwrite this process engine wide 'from address' if needed. If this is not the case,
            the supplied value in <literal>default-from</literal> will be used.
            Default value is 'noreply@activiti.org'.
          </para>
        </listitem>
      </itemizedlist>
    </para>
    
    <para>
      Example mail server configuration:
      <programlisting>&lt;mail server=&quot;localhost&quot; port=&quot;5025&quot; default-from=&quot;noreply@mycorp.com&quot; /></programlisting>
    </para>
  </section>
  
  <section id="historyConfiguration">
    <title>History configuration</title>
    <para>
      Allows to tweak settings that influence the <link linkend="history">history capabilities</link>
       of the engine. Following attributes are supported:
       <itemizedlist>
        <listitem>
          <para>
            <emphasis role="bold">level</emphasis>: possible values are {<literal>none</literal> | <literal>activity</literal>
            | <literal>audit</literal> | <literal>full</literal>}, in a ascending order of information
            that is stored in the history tables.
          </para>
        </listitem>
       </itemizedlist>
    </para>
    
    <para>
      Example history configuration:
      <programlisting>&lt;history level=&quot;audit&quot; /&gt;</programlisting>
    </para>
  </section>
  
  <section id="supporteddatabases">
    <title>Supported databases</title>
    <para>Following are the types (case sensitive!) that Activiti uses to refer to databases.</para>
    <table id="databaseTypes">
      <title>Supported databases</title>
      <tgroup cols='3'>
        <thead>
          <row>
            <entry>Activiti database type</entry>
            <entry>Versions tested</entry>
            <entry>Notes</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>h2</entry>
            <entry>1.2.132</entry>
            <entry></entry>
          </row>
          <row>
            <entry>mysql</entry>
            <entry>5.1.11</entry>
            <entry></entry>
          </row>
          <row>
            <entry>oracle</entry>
            <entry>10.2.0</entry>
            <entry></entry>
          </row>
          <row>
            <entry>postgres</entry>
            <entry>8.4</entry>
            <entry></entry>
          </row>
          <row>
            <entry>db2</entry>
            <entry></entry>
            <entry>not yet supported (coming soon)</entry>
          </row>
          <row>
            <entry>Mssql</entry>
            <entry></entry>
            <entry>not yet supported (coming soon)</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>
    
  <section>
    <title>Changing the database</title>
    
    <para>
      One of the things you probably want to do fairly soon, is configuring Activiti to
      use a different database. To generate a configuration file that can be used
      to configure the engine, following steps need to be done:
      <itemizedlist>
        <listitem>
          <para>
            Edit <literal>setup/build.properties</literal> and change the <literal>db</literal>
            parameter to your type of database (e.g. mysql).
          </para>
        </listitem>
        <listitem>
          <para>
            Edit <literal>setup/build.${db}.properties</literal> and change the 
            JDBC connection parameters to those of your database installation.
          </para>
        </listitem>
        <listitem>
          <para>
            Run <literal>'ant cfg.create'</literal> from within the <literal>setup</literal>
            folder.
          </para>
        </listitem>
        <listitem>
          <para>
            The generate configuration file can now be found in <literal>setup/build/activiti-cfg</literal>.
            Also, for convenience, a jar called <literal>activiti-cfg.jar</literal> containing the configuration file can be found in
            <literal>setup/build</literal> 
          </para>
        </listitem>
      </itemizedlist>
    </para>
    
    <section>
    	<title>Using Oracle in the demo setup</title>
    	<para>When you want to run the demo setup using oracle as datasource, an extra step is required BEFORE you call the ant target <literal>demo.setup</literal>. 
    	  <itemizedlist>
    	    <listitem>
    	      <para>
		        Since we cannot redistribute the Oracle JDBC driver due to its licence, you should download it manually: 
		    	<ulink url="http://www.oracle.com/technetwork/database/enterprise-edition/jdbc-112010-090769.html">http://www.oracle.com/technetwork/database/enterprise-edition/jdbc-112010-090769.html</ulink>.
		    	Make sure you download ojdbc5.jar, version 11.2.0.1.
    	      </para>
    	    </listitem>
    	    <listitem>
    	      <para>
    	        Copy the jar to <literal>lib/provided/</literal>
    	      </para>
    	    </listitem>
    	    <listitem>
    	      <para>
    	        The only thing left to do is calling the following ant target, in the build-file located in <literal>/setup</literal>: 
    	        <programlisting>db.oracle.install.driver</programlisting>  
    	        The ant-target will actually install the jdbc-driver in the maven repository to be able to use it afterward, using the command:
    	        <programlisting>
install:install-file -Dfile=ojdbc5.jar -DgroupId=com.oracle.jdbc -DartifactId=ojdbc5 
   -Dpackaging=jar -Dversion=11.2.0.1.0 -DcreateChecksum=true -DgeneratePom=true
   				</programlisting>
    	      </para>
    	    </listitem>
    	  </itemizedlist>
    	</para>
    </section>
  </section>
  
</chapter>
