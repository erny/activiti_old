<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "../../../target/docbook-tool-1.0/docbook-xml/docbookx.dtd">

<chapter>

  <title>REST API</title>

  <para>
    Activiti includes a REST API to the engine that will be deployed to your server when you run the setup script.
    The REST API uses JSON format (http://www.json.org) and is built upon the Spring Webscripts (http://www.springsurf.org).
  </para>

  <para>
    It is possible to browse the REST API if you point your browser to http://localhost:8080/activiti-rest/service/index
    and login as one of the admin users (kermit). If you click the "Browse by Web Script Package" link you will get an overview
    of the packages that are deployed on the server and you can easily navigate into a package to see the REST API calls
    that are defined for that package. The "Alfresco JavaScript Debugger" can be ignored since Java is used instead of
    JavaScript to implement the logic.
  </para>

  <para>
    Each REST API call has its individual authorization level and you must be logged in as a user to invoke a REST API
    call (except for the /login service). Authentication is done using Basic HTTP Authentication, so if you logged in as
    admin to browse the REST API, as described above, you should be able to perform all calls as described below.
  </para>

  <para>
    The base URL for invoking a REST call is http://localhost:8080/activiti-rest/service/.
    So for example to list the process definitions in the engine point your browser to:
    http://localhost:8080/activiti-rest/service/process-engine
  </para>

  <para>
    Please look below to see what REST API calls that currently are available.
    Please consider the API sections as a "one line hint" to what functionality of the core API that is used to implement the REST API call.    
  </para>

  <section>

     <title>Deployment</title>

     <section>
        <title>Get Deployment Resource</title>
        <para>
           Returns a resource from the deployment.
        </para>
        <itemizedlist>
           <listitem>
              <para>
                 <emphasis role="bold">Request: </emphasis>
                 <literal>GET /deployment/{deploymentId}/resource/{resourceName}</literal>
              </para>
           </listitem>
           <listitem>
              <para>
                 <emphasis role="bold">API: </emphasis>
                 <literal>ProcessEngines.getProcessEngine(configuredProcessEngineName).getRepositoryService().getResourceAsStream(deploymentId, resourceName)</literal>
              </para>
           </listitem>
           <listitem>
              <para>
                 <emphasis role="bold">Response:</emphasis>
                 <programlisting>I.e a .bpmn20.xml file, an image or whatever type of file the deployment resource contained.</programlisting>
              </para>
           </listitem>
        </itemizedlist>
     </section>

    </section>

    <!-- ENGINE -->

    <section>

      <title>Engine</title>

      <section>
        <title>Get Process Engine</title>
        <para>
          Returns the process engine initialization details. If something went wrong during startup, details
          about the error will be given in the "exception" attribute in the response.
        </para>
        <itemizedlist>
          <listitem>
            <para>
              <emphasis role="bold">Request: </emphasis>
              <literal>GET /process-engine</literal>
            </para>
          </listitem>
          <listitem>
            <para>
              <emphasis role="bold">API: </emphasis>
              <literal>ProcessEngines.getProcessEngine(configuredProcessEngineName)</literal>
            </para>
          </listitem>
          <listitem>
            <para>
              <emphasis role="bold">Response:</emphasis>
              <programlisting>
{
  "name": "default",
  "resourceUrl": "jar:file:\//&lt;path-to-deployment&gt;\/activiti-cfg.jar!\/activiti.properties",
  "exception": null,
  "version": "5.0.beta2"
}</programlisting>
            </para>
          </listitem>
        </itemizedlist>
      </section>

    </section>

    <!-- PROCESSES -->

    <section>

      <title>Processes</title>

      <section>
        <title>List Process Definitions</title>
        <para>
          Returns details about the deployed process definitions. The name of the BPMN2.0 xml process diagram is given
          in the "resourceName" attribute and can, in combination with the "deploymentId" attribute, be retreived
          from the GET Deployment Resource REST API call above. If the process has a start form it is given in the
          "startFormResourceKey" attribute. The start form for a process can be retrieved from the GET Start Process Form
          REST API call.
        </para>
        <itemizedlist>
          <listitem>
            <para>
              <emphasis role="bold">Request:</emphasis>
              <literal>GET /process-definitions</literal>
            </para>
          </listitem>
          <listitem>
            <para>
              <emphasis role="bold">API:</emphasis>
              <literal>ProcessEngines.getProcessEngine(configuredProcessEngineName).getProcessService().findProcessDefinitions()</literal>
            </para>
          </listitem>
          <listitem>
            <para>
              <emphasis role="bold">Response:</emphasis>
              <programlisting>
{
  "data":
  [
    {
      "id": "financialReport:1",
      "key": "financialReport",
      "version": 1,
      "name": "Monthly financial report",
      "resourceName": "org/activiti/examples/bpmn/usertask/FinancialReportProcess.bpmn20.xml",
      "deploymentId": "10",
      "startFormResourceKey": null                 
    }
  ]
}</programlisting>
            </para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>Get Process Definition</title>
        <para>
          Returns details about a deployed process definition.
        </para>
        <itemizedlist>
          <listitem>
            <para>
              <emphasis role="bold">Request:</emphasis>
              <literal>GET /process-definition/{processDefinitionId}</literal>
            </para>
          </listitem>
          <listitem>
            <para>
              <emphasis role="bold">API:</emphasis>
              <literal>ProcessEngines.getProcessEngine(configuredProcessEngineName).getProcessService().findProcessDefinitionById(processDefinitionId)</literal>
            </para>
          </listitem>
          <listitem>
            <para>
              <emphasis role="bold">Response:</emphasis>
              <programlisting>
{
  "id": "financialReport:1",
  "key": "financialReport",
  "version": 1,
  "name": "Monthly financial report",
  "resourceName": "org/activiti/examples/bpmn/usertask/FinancialReportProcess.bpmn20.xml",
  "deploymentId": "10",
  "startFormResourceKey": null
}</programlisting>
            </para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>Get Process Definition Form</title>
        <para>
          Returns a process definition's form.
        </para>
        <itemizedlist>
          <listitem>
            <para>
              <emphasis role="bold">Request:</emphasis>
              <literal>GET /process-definition/{processDefinitionId}/form[?format=html|json]</literal>
            </para>
          </listitem>
          <listitem>
            <para>
              <emphasis role="bold">API:</emphasis>
              <literal>ProcessEngines.getProcessEngine(configuredProcessEngineName).getTaskService().getRenderedStartFormById(processDefinitionId)</literal>
            </para>
          </listitem>
          <listitem>
            <para>
              <emphasis role="bold">Response:</emphasis>
              <programlisting>&lt;user-defined-response&gt;</programlisting>
            </para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>Start Process Instance</title>
        <para>
          Creates a process instance based on a process definition and returns details about the newly created process instance.
          Additional variables (from a form) may be passed using the body object. In other words placing attributes
          next to the "processDefinitionId" attribute.
        </para>
        <para>
          These additional variables may also be described using "meta data fields".
          A variable named "numberOfDays" with value "2" may be described as an int using
          an extra variable named "numberOfDays_type" set to "Integer" and to describe it as a required variable use
          an extra variable named "numberOfDays_required" set to "true". If no type descriptor is used the value will
          be treated as a String as long as its surrounded by '"'-characters. Its also possible to set the
          type to "Boolean".
        </para>
        <para>
          Note that if a value is submitted as true (instead of "true") it will be treated as a
          Boolean even if no descriptor is used. The same is also valid for number, i.e., 123 will become an Integer
          but "123" will become a String (unless a descriptor is defined). Note that no variables containing "_" in
          the name will be saved, they are only treated as meta data fields.
        </para>
        <para>
          The reason for using these meta data fields is to make it possible using a standard HTML form to
          submit the values (since an HTML form submits everything as strings its not possible to distinguish the
          type of a value as in JSON). HTML submission will be supported in the near future.
          It is of course not an optimal solution to let the client send instructions to the server about which
          variables that are required and what type they have, but this is a temporary solution to enable simple form
          handling.
          We are currently looking for more proper solutions for forms, containing real meta models that can be used on
          the server to avoid using meta data fields like above. I.e. X-forms or Alfresco Forms.
          Please feel free to give suggestions or tips in the Activiti Forum.
        </para>
        <itemizedlist>
          <listitem>
            <para>
              <emphasis role="bold">Request:</emphasis>
              <literal>POST /process-instance</literal>
              <programlisting>
{
  "processDefinitionId":"financialReport:1"
}</programlisting>
            </para>
          </listitem>
          <listitem>
            <para><emphasis role="bold">API:</emphasis>
              <literal>ProcessEngines.getProcessEngine(configuredProcessEngineName).getProcessService().startProcessInstanceById(processDefinitionId[, variables])</literal>
            </para>
          </listitem>
          <listitem>
            <para><emphasis role="bold">Response:</emphasis>
              <programlisting>
{
  "id": "217",
  "processDefinitionId": "financialReport:1",
  "activityNames": ["writeReportTask"],
  "ended": true
}</programlisting>
            </para>
          </listitem>
        </itemizedlist>
      </section>

    </section>



    <!-- TASKS -->

    <section>

      <title>Tasks</title>

      <section>
        <title>Get Task Summary</title>
        <para>
          Returns a task summary for a specific user: The number of tasks assigned the user, how many unassigned tasks
          that the user may claim and how many unassigned tasks there are per group that the user is a member of.
        </para>
        <itemizedlist>
          <listitem>
            <para>
              <emphasis role="bold">Request:</emphasis>
              <literal>GET /tasks-summary?user={userId}</literal>
            </para>
          </listitem>
          <listitem>
            <para>
              <emphasis role="bold">API:</emphasis>
              <literal>ProcessEngines.getProcessEngine(configuredProcessEngineName).getTaskService().createTaskQuery().xxx().count()</literal>
            </para>
          </listitem>
          <listitem>
            <para>
              <emphasis role="bold">Response:</emphasis>
              <programlisting>
{
  "assigned": {
    "total": 0
  },
  "unassigned": {
    "total": 1,
    "groups":
    {
      "accountancy": 1,
      "sales": 0,
      "engineering": 0,
      "management": 0
    }
  }
}</programlisting>
            </para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>List Tasks</title>
        <para>
          Returns a task list based on a) user of a specific role: assignee (lists the tasks assigned to the user) or
          candidate (lists the tasks that the user may claim) or a candidate group (lists tasks that the members of the group may claim).
          Result will be paginated using start (index to start from, default 0) and size (the number of tasks to return in the request, default 10).
          If the task has a form it is given in the "formResourceKey" attribute. The form for a task can be retrieved
          from the GET Task Form REST API call.
        </para>
        <itemizedlist>
          <listitem>
            <para>
              <emphasis role="bold">Request:</emphasis>
              <literal>GET /tasks?[assignee={userId}|candidate={userId}|candidate-group={groupId}][&amp;start=0][&amp;size=10]</literal>
            </para>
          </listitem>
          <listitem>
            <para>
              <emphasis role="bold">API:</emphasis>
              <literal>ProcessEngines.getProcessEngine(configuredProcessEngineName).getTaskService().createTaskQuery().xxx().listPage()</literal>
            </para>
          </listitem>
          <listitem>
            <para>
              <emphasis role="bold">Response:</emphasis>
              <programlisting>
{
  "data": [
    {
      "id": 127,
      "name": "Handle vacation request",
      "description": "Vacation request by Kermit",
      "priority": 50,
      "assignee": null,
      "executionId": 118,
      "formResourceKey": "org/activiti/examples/taskforms/approve.form"
    }
  ],
  "total": 1,
  "start": 0,
  "sort": "id",
  "order": "asc",
  "size": 10
}</programlisting>
            </para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>Get Task</title>
        <para>
          Returns details about the task with the task id.
        </para>
        <itemizedlist>
          <listitem>
            <para>
              <emphasis role="bold">Request:</emphasis>
              <literal>GET /task/{taskId}</literal>
            </para>
          </listitem>
          <listitem>
            <para>
              <emphasis role="bold">API:</emphasis>
              <literal>ProcessEngines.getProcessEngine(configuredProcessEngineName).getTaskService().findTask(taskId)</literal>
            </para>
          </listitem>
          <listitem>
            <para>
              <emphasis role="bold">Response:</emphasis>
              <programlisting>
{
      "id": 127,
      "name": "Handle vacation request",
      "description": "Vacation request by Kermit",
      "priority": 50,
      "assignee": null,
      "executionId": 118,
      "formResourceKey": "org/activiti/examples/taskforms/approve.form"
}</programlisting>
            </para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>Get Task Form</title>
        <para>
          Returns a task's form.
        </para>
        <itemizedlist>
          <listitem>
            <para>
              <emphasis role="bold">Request:</emphasis>
              <literal>GET /task/{taskId}/form</literal>
            </para>
          </listitem>
          <listitem>
            <para>
              <emphasis role="bold">API:</emphasis>
              <literal>ProcessEngines.getProcessEngine(configuredProcessEngineName).getTaskService().getRenderedTaskForm(taskId)</literal>
            </para>
          </listitem>
          <listitem>
            <para>
              <emphasis role="bold">Response:</emphasis>
              <programlisting>&lt;user-defined-response&gt;</programlisting>
            </para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>Perform Task Operation</title>
        <para>
          Performs an operation (claim or complete) on a task.
          For the "complete" operation additional variables (from a form) may be passed in the body.
          To read more about additional variables from forms, visit the Start Process Instance section
        </para>
        <itemizedlist>
          <listitem>
            <para>
              <emphasis role="bold">Request:</emphasis>
              <literal>PUT /task/{taskId}/[claim|complete]</literal>
              <programlisting>{}</programlisting>
            </para>
          </listitem>
          <listitem>
            <para><emphasis role="bold">API:</emphasis>
              <literal>ProcessEngines.getProcessEngine(configuredProcessEngineName).getTaskService().xxx(taskId ...)</literal>
            </para>
          </listitem>
          <listitem>
            <para><emphasis role="bold">Response:</emphasis>
              <programlisting>
{
  "success": true
}</programlisting>
            </para>
          </listitem>
        </itemizedlist>
      </section>

    </section>


    <!-- IDENTITY -->

    <section>

      <title>Identity</title>

      <section>
        <title>Login</title>
        <para>
          Authenticates a user.
        </para>
        <itemizedlist>
          <listitem>
            <para>
              <emphasis role="bold">Request:</emphasis>
              <literal>POST /login</literal>
              <programlisting>
{
  "userId": "kermit",
  "password": "kermit"
}</programlisting>
            </para>
          </listitem>
          <listitem>
            <para>
              <emphasis role="bold">API:</emphasis>
              <literal>ProcessEngines.getProcessEngine(configuredProcessEngineName).getIdentityService().checkPassword(userId, password)</literal>
            </para>
          </listitem>
          <listitem>
            <para>
              <emphasis role="bold">Response:</emphasis>
              <programlisting>
{
  "success": true
}</programlisting>
            </para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>Get User</title>
        <para>
          Returns details about a user.
        </para>
        <itemizedlist>
          <listitem>
            <para>
              <emphasis role="bold">Request:</emphasis>
              <literal>GET /user/{userId}</literal>
            </para>
          </listitem>
          <listitem>
            <para>
              <emphasis role="bold">API:</emphasis>
              <literal>ProcessEngines.getProcessEngine(configuredProcessEngineName).getIdentityService().findUser(userId)</literal>
            </para>
          </listitem>
          <listitem>
            <para>
              <emphasis role="bold">Response:</emphasis>
              <programlisting>
{
  "id": "kermit",
  "firstName": "Kermit",
  "lastName": "the Frog",
  "email": "kermit@server.com"
}</programlisting>
            </para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>List User's Groups</title>
        <para>
          Returns details about a user's groups. To only get groups of a certain type use the "type" parameter.
        </para>
        <itemizedlist>
          <listitem>
            <para>
              <emphasis role="bold">Request:</emphasis>
              <literal>GET /user/{userId}/groups[?type=groupType]</literal>
            </para>
          </listitem>
          <listitem>
            <para><emphasis role="bold">API:</emphasis>
              <literal>ProcessEngines.getProcessEngine(configuredProcessEngineName).getIdentityService().xxx(userId[, groupType])</literal>
            </para>
          </listitem>
          <listitem>
            <para><emphasis role="bold">Response:</emphasis>
              <programlisting>
{
  data: [
    {
      "id": "admin",
      "name": "System administrator",
      "type": "security-role"
    }
  ]
}</programlisting>
            </para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>Get Group</title>
        <para>
          Returns details about a group.
        </para>
        <itemizedlist>
          <listitem>
            <para>
              <emphasis role="bold">Request:</emphasis>
              <literal>GET /group/{groupId}</literal>
            </para>
          </listitem>
          <listitem>
            <para>
              <emphasis role="bold">API:</emphasis>
              <literal>ProcessEngines.getProcessEngine(configuredProcessEngineName).getIdentityService().findGroup(groupId)</literal>
            </para>
          </listitem>
          <listitem>
            <para>
              <emphasis role="bold">Response:</emphasis>
              <programlisting>
{
  "id": "admin",
  "name": "System administrator",
  "type": "security-role"
}</programlisting>
            </para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>List Groups's Users</title>
        <para>
          Returns details about a group's users.
        </para>
        <itemizedlist>
          <listitem>
            <para>
              <emphasis role="bold">Request:</emphasis>
              <literal>GET /groups/{groupId}/users</literal>
            </para>
          </listitem>
          <listitem>
            <para><emphasis role="bold">API:</emphasis>
              <literal>ProcessEngines.getProcessEngine(configuredProcessEngineName).getIdentityService().findUsersByGroup(userId)</literal>
            </para>
          </listitem>
          <listitem>
            <para><emphasis role="bold">Response:</emphasis>
              <programlisting>
{
  data: [
    {
      "id": "kermit",
      "firstName": "Kermit",
      "lastName": "the Frog",
      "email": "kermit@server.com"
    }
  ]
}</programlisting>
            </para>
          </listitem>
        </itemizedlist>
      </section>
    </section>


    <!-- MANAGEMENT -->

    <section>

      <title>Management</title>

      <section>
        <title>List Database Tables</title>
        <para>
          Returns meta data information about all database tables in the engine.
        </para>
        <itemizedlist>
          <listitem>
            <para>
              <emphasis role="bold">Request:</emphasis>
              <literal>GET /management/tables</literal>
            </para>
          </listitem>
          <listitem>
            <para>
              <emphasis role="bold">API:</emphasis>
              <literal>ProcessEngines.getProcessEngine(configuredProcessEngineName).getManagementService().getTableCount()</literal>
            </para>
          </listitem>
          <listitem>
            <para>
              <emphasis role="bold">Response:</emphasis>
              <programlisting>
{
  "data": [
    {
      "tableName": "ACT_GE_PROPERTY",
      "noOfResults": 2
    }
  ]
}</programlisting>
            </para>
          </listitem>
        </itemizedlist>
      </section>

      <section>
        <title>Get Table Meta Data</title>
        <para>
          Returns meta data about a database table.
        </para>
        <itemizedlist>
          <listitem>
            <para>
              <emphasis role="bold">Request:</emphasis>
              <literal>GET /management/table/{tableName}</literal>
            </para>
          </listitem>
          <listitem>
            <para><emphasis role="bold">API:</emphasis>
              <literal>ProcessEngines.getProcessEngine(configuredProcessEngineName).getManagementService().getTableMetaData(tableName))</literal>
            </para>
          </listitem>
          <listitem>
            <para><emphasis role="bold">Response:</emphasis>
              <programlisting>
{
  "tableName": "ACT_GE_PROPERTY",
  "columnNames": ["REV_","NAME_","VALUE_"],
  "columnNames": ["class java.lang.Integer", "class java.lang.String", "class java.lang.String"]
}</programlisting>
            </para>
          </listitem>
        </itemizedlist>
      </section>


      <section>
        <title>Get Table Data</title>
        <para>
          Returns data from a database table. Result will be paginated even if no pagination parameters are provided.
          Default value for start is 0 and default value for size is 10.
        </para>
        <itemizedlist>
          <listitem>
            <para>
              <emphasis role="bold">Request:</emphasis>
              <literal>GET /management/table/{tableName}/data?start=0&amp;size=10</literal>
            </para>
          </listitem>
          <listitem>
            <para><emphasis role="bold">API:</emphasis>
              <literal>ProcessEngines.getProcessEngine(configuredProcessEngineName).getManagementService().createTablePageQuery().tableName(tableName).start(start).size(size).orderXXX(sort).singleResult();
              </literal>
            </para>
          </listitem>
          <listitem>
            <para><emphasis role="bold">Response:</emphasis>
              <programlisting>
{
  "data": [
    {
      "NAME_": "schema.version",
      "REV_": "1",
      "VALUE_": "5.0.beta2"
    },
    {
      "NAME_": "next.dbid",
      "REV_": "4",
      "VALUE_": "310"
    }
  ],
  "total": 2,
  "start": 0,
  "sort": "NAME_",
  "order": "asc",
  "size": 2
}</programlisting>
            </para>
          </listitem>
        </itemizedlist>
      </section>

    </section>

</chapter>
