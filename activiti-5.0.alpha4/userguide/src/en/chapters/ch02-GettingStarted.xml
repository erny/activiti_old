<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "../../../target/docbook-tool-1.0/docbook-xml/docbookx.dtd">

<chapter>
  <title>Getting Started</title>
  
  <section id="demo.setup">
    <title>Demo setup</title>
    <para>Setup is an ant script located in directory <literal>setup</literal> that helps you get up and running with Activiti quickly.
    </para>
    <para>To run the script, you'll need a working 
    <ulink url="http://java.sun.com/javase/downloads/index.jsp">Java runtime</ulink> and
    <ulink url="http://ant.apache.org/bindownload.cgi">Ant</ulink> installation.
    Also make sure that the <emphasis>JAVA_HOME</emphasis> and <emphasis>ANT_HOME</emphasis> system
    variables are correctly set. The way to do this depends on your operating system, but the
    <ulink url="http://ant.apache.org/manual/install.html">manual of ant</ulink> gives a description
    on how to do this. The demo setup script is tested with Ant 1.7.1.
    </para>
    <para>To configure setup for your environment, update property files <literal>build.properties</literal> 
    and <literal>build.{your-database}.properties</literal> .  Check those files for more information on 
    configurable properties and potential values.
    </para>
    <para>The easiest target to get started is <literal>demo.setup</literal>. That target will 
    </para>
    <itemizedlist>
      <listitem><para>Install the H2 in ${activiti.home}/apps/h2</para></listitem>
      <listitem><para>Start the H2 database</para></listitem>
      <listitem><para>Create the Activiti tables in the database</para></listitem>
      <listitem><para>Download Tomcat if not available in the ${downloads.dir}</para></listitem>
      <listitem><para>Install Tomcat in ${activiti.home}/apps/apache-tomcat-${tomcat.version}</para></listitem>
      <listitem><para>Create an Activiti configuration jar</para></listitem>
      <listitem><para>Install Activiti Engine into Tomcat, which includes libraries and configurations</para></listitem>
      <listitem><para>Insert the demo users and groups in the Activiti identity tables (see below)</para></listitem>
      <listitem><para>Deploy the example processes to the Activiti Engine DB</para></listitem>
      <listitem><para>Deploy the REST interface webapp into tomcat</para></listitem>
      <listitem><para>Download the Activiti Modeler webapp to ${activiti.home}/webapps</para></listitem>
      <listitem><para>Deploy the Probe, Explorer and Modeler webapps into tomcat.</para></listitem>
      <listitem><para>Start tomcat</para></listitem>
    </itemizedlist>
    <para>After running this target H2 and Tomcat will be running in the background.  To stop those 
    processes run <literal>ant demo.teardown</literal> </para>
    <para>The other targets in that build script can also be called individually and they will take the 
    configurable properties into account. Run <literal>ant -p</literal> for more details.
    </para>
    <para>These are the demo users:</para>
    <table>
      <title>The demo users</title>
      <tgroup cols='3'>
        <thead>
          <row>
            <entry>UserId</entry>
            <entry>Password</entry>
            <entry>Security roles</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>kermit</entry>
            <entry>kermit</entry>
            <entry>admin</entry>
          </row>
          <row>
            <entry>gonzo</entry>
            <entry>gonzo</entry>
            <entry>manager</entry>
          </row>
          <row>
            <entry>fozzie</entry>
            <entry>fozzie</entry>
            <entry>user</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    
    <para>Now you can access following web applications:</para>
    <table>
      <title>The webapp tools</title>
      <tgroup cols='3'>
        <thead>
          <row>
            <entry>Webapp Name</entry>
            <entry>URL</entry>
            <entry>Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>Activiti Probe</entry>
            <entry><ulink url="http://localhost:8080/activiti-probe">http://localhost:8080/activiti-probe</ulink> </entry>
            <entry>The admin management console.  Use this tool to see if the configured process engine is 
            correctly initialized, DB tables contents.
            </entry>
          </row>
          <row>
            <entry>Activiti Explorer</entry>
            <entry><ulink url="http://localhost:8080/activiti-explorer">http://localhost:8080/activiti-explorer</ulink> </entry>
            <entry>The process engine user console.  Use this tool to view your personal and candidate task lists and to 
            complete tasks.
            </entry>
          </row>
          <row>
            <entry>Activiti Modeler powered by Signavio</entry>
            <entry><ulink url="http://localhost:8080/activiti-modeler/p/explorer">http://localhost:8080/activiti-modeler/p/explorer</ulink></entry>
            <entry>The web based process designer tool.  Use this tool to graphically author BPMN 2.0 compliant process definitions 
            files.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>
  
  <section id="examples">
    <title>Examples Eclipse setup</title>
    <para>The <literal>docs/examples</literal> show each feature.  That directory can be imported as an eclipse project.</para>
    <para>First define a <literal>User Library</literal> called <literal>Activiti Libraries</literal> like this</para>
    <para><literal>Preferences --> Java --> Build Path --> User Libraries</literal> and then click <literal>New...</literal> </para>
    <mediaobject><imageobject><imagedata align="center" fileref="images/create.user.libraries.png"/></imageobject></mediaobject>
    <para>Enter name <literal>Activiti Libraries</literal> <emphasis role="bold">(case sensitive!)</emphasis> and then select
    all the libs in the <literal>lib</literal> directory except those with -sources in it. 
    </para>
    <para>Then expand the activiti-engine jar, select <literal>Source attachement</literal>, Click Edit... and select the 
      activiti-engine-${version}-sources.jar in the <literal>${activiti.home}/lib</literal> directory
    </para>
    <para><literal>File --> Import --> General --> Existing Projects into Workspace</literal></para>
    <para>Then select the docs/examples directory and complete the import of the examples project.</para>
    <para>
      To get BPMN 2.0 XML auto-completion and validation while typing, you need to add the BPMN 2.0
      XSD to the XML catalog. Go to <literal>Preferences --> XML --> XML Catalog --> Add</literal>, 
      and select the XSD from the fileSystem in the folder <emphasis>docs/xsd/BPMN20.xsd</emphasis>.
      <mediaobject><imageobject><imagedata align="center" fileref="images/eclipse.setup.xml.catalog.png"/></imageobject></mediaobject>
    </para>
  </section>

  <section id="organising.your.project">
    <title>Organising your project</title>
    <para>This section explains how to create an executable BPMN 2.0 process inside an Eclipse Java project.</para>
    <para>Start with creating a new Java project in Eclipse.</para>
    <para>Add the Activiti Libraries to the project's classpath:</para>
    <para><literal>Project properties --> Java Build Path --> Libraries --> Add Library... --> User Library</literal> </para>
    <mediaobject><imageobject><imagedata align="center" fileref="images/add.user.libraries.png"/></imageobject></mediaobject>
    <para>Then select <literal>Activiti Libraries</literal> </para> 
    <para>Then generate an activiti configuration jar with the setup utility.  To do that, first make sure
    the properties of the setup script are set to match your project configuration. Check the properties files in the setup 
    directory for more information on configurable properties and potential values.
    </para>
    <para><literal>ant cfg.create</literal> </para>
    <para>The generated activiti configuration files will now be in directory <literal>${activiti.home}/setup/build/activiti-cfg</literal> 
    and jarred as  <literal>${activiti.home}/setup/build/activiti-cfg.jar</literal> </para>
    <para>Put the configuration files or the jar in your project's classpath.</para>
    <para>TODO: give recommendation on how people should use with a src, process, test and cfg directories</para>
    <para>TODO: give recommendation on how people people can write an ant build.xml to deploy their process to staging or production</para>
  </section>
</chapter>
