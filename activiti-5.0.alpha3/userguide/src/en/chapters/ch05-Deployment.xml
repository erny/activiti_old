<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "../../../target/docbook-tool-1.0/docbook-xml/docbookx.dtd">

<chapter id="chDeployment">
  <title>Deployment</title>

  <section>
    <title>Business archives</title>
    <para>To deploy processes, they have to be wrapped in a business archive.  A business archive is the unit 
    of deployment to an Activiti Engine.  Basically a business archive is equivalent to a zip file.  It can contain 
    BPMN 2.0 processes, task forms, rules, java classes and any other type of file.  In general, a business archive 
    contains a collection of named resources.  
    </para>
    <para>When a business archive is deployed, it is scanned for BPMN files with a <literal>.bpmn.xml</literal> extension.
    Each of those will be parsed and potentially contains multiple process definitions.  
    </para>
  </section>
  
  <section>
    <title>Deploying programmatically</title>
    <para>Deploying a business archive from a zip file can be done like this: 
    </para>
    <programlisting>String barFileName = &quot;/processes/examples.bar&quot;
InputStream fileInputStream = new FileInputStream(barFileName);
processService
    .newDeployment()
    .name(barFileName)
    .addZipInputStream(new ZipInputStream(inputStream))
    .deploy();
    </programlisting>
    <para>It's also possible to build a deployment from individual resources. 
    See javadocs for more details.</para>
  </section>
  
  <section>
    <title>Deploying with ant</title>
    <para>To deploy a business archive with ant, first the <literal>deploy-bar</literal> task 
    needs to be defined.  Make sure that the configuration jar is on the classpath, as well as the 
    activiti jar and all its dependencies:</para>
    <programlisting>&lt;taskdef name=&quot;deploy-bar&quot; classname=&quot;org.activiti.impl.ant.DeployBarTask&quot;&gt;
  &lt;classpath&gt;
    &lt;fileset dir=&quot;...&quot;&gt;
      &lt;include name=&quot;activiti-cfg.jar&quot;/&gt;
      &lt;include name=&quot;your-db-driver.jar&quot;/&gt;
    &lt;/fileset&gt;
    &lt;fileset dir=&quot;${activiti.home}/lib&quot;&gt;
      &lt;include name=&quot;activiti-engine-${activiti.version}.jar&quot;/&gt;
      &lt;include name=&quot;ibatis-sqlmap-*.jar&quot;/&gt;
    &lt;/fileset&gt;
  &lt;/classpath&gt;
&lt;/taskdef&gt;
&lt;deploy-bar file=&quot;.../yourprocess.bar&quot; /&gt;</programlisting>
  </section>
  
  <section>
    <title>Versioning of process definitions</title>
    <para>BPMN doesn't have a notion of versioning.  And that is good because the executable BPMN process 
    file will probably live in an SVN repository as part of your development project.  Versions of process definitions
    are created during deployment. During deployment, Activiti will assign a version to the <literal>ProcessDefinition</literal> 
    before it is stored in the Activiti DB.
    </para>
    <para>For each process definition in a business archive the following steps are performed to 
    initialize the properties <literal>key</literal>, <literal>version</literal>, <literal>name</literal> and <literal>id</literal>:
    </para>
    <itemizedlist>
      <listitem><para>The process <literal>id</literal> attribute is used as the process definition <literal>key</literal> property</para></listitem>
      <listitem><para>The process <literal>name</literal> attribute is used as the process definition <literal>name</literal> property.
        If the name attribute is not specified, then id attribute is used as the name.
      </para></listitem>
      <listitem><para>The first time a process with a particular key is deployed, version 1 is assigned.  For all subsequent deployments of
      process definitions with the same key, the version will be set 1 higher then the max currently deployed version.  The key property
      is used to distinct process definitions.</para></listitem>
      <listitem><para>The id property is set to {processDefinitionKey}:{processDefinitionVersion}</para></listitem>
    </itemizedlist>
  </section>

</chapter>
