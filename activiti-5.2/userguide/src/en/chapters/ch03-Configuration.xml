<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "../../../target/docbook-tool-1.0/docbook-xml/docbookx.dtd">

<chapter>
  <title>Configuration</title>
  
  <section id="configuration">
    <title>Creating a ProcessEngine</title>
    
    <para>
    The Activiti process engine is configured through a xml file called <literal>activiti.cfg.xml</literal>.
    Note that this is <emphasis role="bold">not</emphasis> applicable if you're 
    using <link linkend="springintegration">the Spring style of building a process engine</link>.
    </para>

    <para>
    The easiest way to obtain a <literal>ProcessEngine</literal>, is to use the 
    <literal>org.activiti.engine.ProcessEngines</literal> class:
    <programlisting>ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine()</programlisting>
    This will look for an <literal>activiti.cfg.xml</literal> file on the classpath and
    construct an engine based on the configuration in that file.
    The following snippet shows an example configuration. 
    The following sections will give a detailed overview of the configuration properties.
    <programlisting>&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; 
       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans   http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;

  &lt;bean id=&quot;processEngineConfiguration&quot; class=&quot;org.activiti.engine.impl.cfg.StandaloneProcessEngineConfiguration&quot;&gt;
  
    &lt;property name=&quot;databaseType&quot; value=&quot;h2&quot; /&gt;
    &lt;property name=&quot;jdbcUrl&quot; value=&quot;jdbc:h2:mem:activiti;DB_CLOSE_DELAY=1000&quot; /&gt;
    &lt;property name=&quot;jdbcDriver&quot; value=&quot;org.h2.Driver&quot; /&gt;
    &lt;property name=&quot;jdbcUsername&quot; value=&quot;sa&quot; /&gt;
    &lt;property name=&quot;jdbcPassword&quot; value=&quot;&quot; /&gt;
    
    &lt;property name=&quot;databaseSchemaUpdate&quot; value=&quot;true&quot; /&gt;
    
    &lt;property name=&quot;jobExecutorActivate&quot; value=&quot;false&quot; /&gt;
    
    &lt;property name=&quot;mailServerHost&quot; value=&quot;mail.my-corp.com&quot; /&gt; 
    &lt;property name=&quot;mailServerPort&quot; value=&quot;5025&quot; /&gt;    
  &lt;/bean&gt;

&lt;/beans&gt;</programlisting>
    </para> 
    
    <para>
      Note that the configuration xml is in fact a Spring configuration.
      <emphasis role="bold">This does not mean that Activiti can only be used in a Spring environment!</emphasis>
      We are simply leveraging the parsing and dependency injection capabilitities of Spring
      internally for building up the engine.
    </para>
    
    <para>
      The ProcessEngineConfiguration object can also be created programmatically using the configuration file.
      It is also possible to use a different bean id (eg. see line 3).
      <programlisting>
ProcessEngineConfiguration.createProcessEngineConfigurationFromResourceDefault();
ProcessEngineConfiguration.createProcessEngineConfigurationFromResource(String resource);
ProcessEngineConfiguration.createProcessEngineConfigurationFromResource(String resource, String beanName);
ProcessEngineConfiguration.createProcessEngineConfigurationFromInputStream(InputStream inputStream);
ProcessEngineConfiguration.createProcessEngineConfigurationFromInputStream(InputStream inputStream, String beanName);</programlisting>
   It is also possible not to use a configuration file, and create a configuration based on 
   defaults (see <link linkend="configurationClasses">the different supported classes</link> for more information).
   <programlisting>
ProcessEngineConfiguration.createStandaloneProcessEngineConfiguration();
ProcessEngineConfiguration.createStandaloneInMemProcessEngineConfiguration();</programlisting>
   All these <literal>ProcessEngineConfiguration.createXXX()</literal> methods return a 
   <literal>ProcessEngineConfiguration</literal> that can further be tweaked if needed.
   After calling the <literal>buildProcessEngine()</literal> operation, a <literal>ProcessEngine</literal>
   is created:
   <programlisting>
ProcessEngine processEngine = ProcessEngineConfiguration.createStandaloneInMemProcessEngineConfiguration()
  .setDatabaseSchemaUpdate(ProcessEngineConfiguration.DB_SCHEMA_UPDATE_FALSE)
  .setJdbcUrl("jdbc:h2:mem:my-own-db;DB_CLOSE_DELAY=1000")
  .setJobExecutorActivate(true)
  .buildProcessEngine();</programlisting>
    </para>
     
  </section>  
    
  <section id="configurationRoot">
    <title>ProcessEngineConfiguration bean</title>
    <para>
      The <literal>activiti.cfg.xml</literal> must contain a bean that has the id <literal>'processEngineConfiguration'</literal>.
      <programlisting> &lt;bean id=&quot;processEngineConfiguration&quot; class=&quot;org.activiti.engine.impl.cfg.StandaloneProcessEngineConfiguration&quot;&gt;</programlisting>
      This bean is then used to construct the <literal>ProcessEngine</literal>. There are multiple
      classes available that can be used to define the <literal>processEngineConfiguration</literal>.
      These classes represent different environments, and set defaults accordingly. It's a best 
      practice to select the class the matches (the most) your environment, to minimalise the
      number of properties needed to configure the engine. Following classes are currently available
      (more will follow in future releases):
      <itemizedlist id="configurationClasses">
        <listitem>
          <para>
            <emphasis role="bold">org.activiti.engine.impl.cfg.StandaloneProcessEngineConfiguration</emphasis>:
            the process engine is used in a standalone way. Activiti will take care of the transactions.
            By default, the database will only be checked when the engine boots (and an exception is thrown if there
            is no Activiti schema or the schema version is incorrect). 
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">org.activiti.engine.impl.cfg.StandaloneInMemProcessEngineConfiguration</emphasis>:
            this is a convience class for unit testing purposes. Activiti will take care of the transactions.
            An H2 in-memory database is used by default. The database will be created and dropped when the engine boots and shuts down.
            When using this, probably no additional configuration is needed (except when using for example the job executor or mail capabilities).
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">org.activiti.spring.SpringProcessEngineConfiguration</emphasis>:
            To be used when the process engine is used in a Spring environment. 
            See <link linkend="springintegration">the Spring integration section</link> for more information. 
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">org.activiti.engine.impl.cfg.JtaProcessEngineConfiguration</emphasis>:
            (<link linkend="experimental">[EXPERIMENTAL]</link>) to be used when the engine runs
            in standalone mode, with JTA transactions.
          </para>
        </listitem>
      </itemizedlist>
    </para>
  </section>
    
  <section id="databaseConfiguration">
    <title>Database configuration</title>
    <para>
      There are two ways to configure the database that the Activiti engine will use.
      The first option is to define the jdbc properties of the database:
      <itemizedlist>
        <listitem>
          <para>
            <emphasis role="bold">jdbcUrl</emphasis>: jdbc url of the database.
          </para>
        </listitem>
        <listitem>
           <para>
            <emphasis role="bold">jdbcDriver</emphasis>: implementation of the driver for the specific database type.
          </para>
        </listitem>
        <listitem>
           <para>
            <emphasis role="bold">jdbcUsername</emphasis>: username to connect to the database.
          </para>
        </listitem>
        <listitem>
           <para>
            <emphasis role="bold">jdbcPassword</emphasis>: password to connect to the database.
          </para>
        </listitem>
      </itemizedlist>
    </para>
    
    <para>
      The datasource that is constructed based on the provided jdbc properties
      will have the default <ulink url="http://www.mybatis.org/">MyBatis</ulink> connection pool
      settings. Following attributes can optionally be set to tweak that connection pool (taken from the MyBatis documentation):
      <itemizedlist>
        <listitem>
          <para>
            <emphasis role="bold">jdbcMaxActiveConnections</emphasis>: The number of active connections
            that the connection pool at maximum at any time can contain. Default is 10.
          </para>
        </listitem>
        <listitem>
           <para>
            <emphasis role="bold">jdbcMaxIdleConnections</emphasis>: The number of idle connections
            that the connection pool at maximum at any time can contain.
          </para>
        </listitem>
        <listitem>
           <para>
            <emphasis role="bold">jdbcMaxCheckoutTime</emphasis>: The amount of time in milliseconds a connection
            can be 'checked out' from the connection pool before it is forcefully returned.
            Default is 20000 (20 seconds).
          </para>
        </listitem>
        <listitem>
           <para>
            <emphasis role="bold">jdbcMaxWaitTime</emphasis>: This is a low level setting that gives the pool 
            a chance to print a log status and re-attempt the acquisition of a connection in the 
            case that itâ€™s taking unusually long (to avoid failing silently forever if the pool is misconfigured)
            Default is 20000 (20 seconds).
          </para>
        </listitem>
      </itemizedlist>
    </para>
    
    <para>
      Example database configuration:
      <programlisting>
&lt;property name=&quot;databaseType&quot; value=&quot;h2&quot; /&gt;
&lt;property name=&quot;jdbcUrl&quot; value=&quot;jdbc:h2:mem:activiti;DB_CLOSE_DELAY=1000&quot; /&gt;
&lt;property name=&quot;jdbcDriver&quot; value=&quot;org.h2.Driver&quot; /&gt;
&lt;property name=&quot;jdbcUsername&quot; value=&quot;sa&quot; /&gt;
&lt;property name=&quot;jdbcPassword&quot; value=&quot;&quot; /&gt;
      </programlisting>
    </para>
    
    <para>
      Alternatively, a <literal>javax.sql.DataSource</literal> implementation can be used 
      (eg. DBCP from <ulink url="http://commons.apache.org/dbcp/">Apache Commons</ulink>):
      <programlisting>
&lt;bean id=&quot;dataSource&quot; class=&quot;org.apache.commons.dbcp.BasicDataSource&quot; &gt;
  &lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.jdbc.Driver&quot; /&gt;
  &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/activiti&quot; /&gt;
  &lt;property name=&quot;username&quot; value=&quot;activiti&quot; /&gt;
  &lt;property name=&quot;password&quot; value=&quot;activiti&quot; /&gt;
  &lt;property name=&quot;defaultAutoCommit&quot; value=&quot;false&quot; /&gt;
&lt;/bean&gt;      

&lt;bean id=&quot;processEngineConfiguration&quot; class=&quot;org.activiti.engine.impl.cfg.StandaloneProcessEngineConfiguration&quot;&gt;
  
    &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt;
    ...
      </programlisting>
      Note that Activiti does not ship with a library that allows to define such datasource.
      So you have to make sure that the libraries (eg. from DBCP) are on your classpath.
    </para>
    
    <para>
      Following properties can be set, regardless of using the jdbc or datasource approach:
      <itemizedlist>
        <listitem>
          <para>
            <emphasis role="bold">databaseType</emphasis>: indicates the type of database.
            <emphasis role="bold">This property is required when not using the default H2 database</emphasis>
            This setting will determine which create/drop scripts and queries will be used. See 
            <link linkend="supporteddatabases">the 'supported databases' section</link> for 
            an overview of which types are supported.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">databaseSchemaUpdate</emphasis>: allows to set the strategy to handle
            the database schema on process engine boot and shutdown.
            <itemizedlist>
              <listitem>
                <para>
                  <literal>false</literal> (default): Checks the version of the DB schema against the
                  library when the process engine is being created and throws an exception if the 
                  versions don't match.
                </para>
              </listitem>
              <listitem>
                <para>
                  <literal>true</literal>: Upon building of the process engine, a check is performed and 
                  an update of the schema is performed if it is necessary. If the schema doesn't exist,
                  it is created.
                </para>
              </listitem>
               <listitem>
                <para>
                  <literal>create-drop</literal>: Creates the schema when the process engine is being created and 
                  drops the schema when the process engine is being closed.
                </para>
              </listitem>
            </itemizedlist>
          </para>
        </listitem>
      </itemizedlist>
    </para>
  </section>
  
  <section id="jobExecutorConfiguration">
    <title>Job executor activation</title>
    <para>The JobExecutor is a component that manages a couple of threads to fire timers (and later also asynchronous messages).
    For unit testing scenarios, it is cumbersome to work with multiple threads.  Therefor the API allows to query for 
    (<literal>ManagementService.createJobQuery</literal>) and execute jobs (<literal>ManagementService.executeJob</literal>) through 
    the API so that job execution can be controlled from within a unit test.  To avoid that the job executor interferes, it can be turned off. 
    </para>
    <para> 
    By default, the JobExecutor is activated when the process engine boots.  Specify
    <programlisting>&lt;property name=&quot;jobExecutorActivate&quot; value=&quot;false&quot; /></programlisting>
    when you don't want the JobExecutor to be activated upon process engine boot.  
    </para>
  </section>
  
  <section id="mailServerConfiguration">
    <title>Mail server configuration</title>
    <para>
      Optional. Activiti supports sending e-mails in business processes. To actually send an e-mail, a valid
      SMTP mail server configuration is required.  See the 
      <link linkend="bpmnEmailTaskServerConfiguration">e-mail task</link> for the configuration options.
    </para>
  </section>
  
  <section id="historyConfiguration">
    <title>History configuration</title>
    <para>
      Optional. Allows to tweak settings that influence the <link linkend="history">history capabilities</link>
      of the engine. See <link linkend="historyConfig">history configuration</link> for more details.
      <programlisting>&lt;property name=&quot;history&quot; value=&quot;audit&quot; /&gt;</programlisting>
    </para>
  </section>
  
  <section id="supporteddatabases">
    <title>Supported databases</title>
    <para>Following are the types (case sensitive!) that Activiti uses to refer to databases.</para>
    <table id="databaseTypes">
      <title>Supported databases</title>
      <tgroup cols='3'>
        <thead>
          <row>
            <entry>Activiti database type</entry>
            <entry>Versions tested</entry>
            <entry>Notes</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>h2</entry>
            <entry>1.2.132</entry>
            <entry>Default configured database</entry>
          </row>
          <row>
            <entry>mysql</entry>
            <entry>5.1.11</entry>
            <entry></entry>
          </row>
          <row>
            <entry>oracle</entry>
            <entry>10.2.0</entry>
            <entry></entry>
          </row>
          <row>
            <entry>postgres</entry>
            <entry>8.4</entry>
            <entry></entry>
          </row>
          <row>
            <entry>db2</entry>
            <entry></entry>
            <entry>not yet supported (coming soon, see <ulink url="http://jira.codehaus.org/browse/ACT-330">ACT-330</ulink>)</entry>
          </row>
          <row>
            <entry>mssql</entry>
            <entry>2008 using JDBC jtds-1.2.4</entry>
            <entry><link linkend="experimental"><emphasis role="bold">[EXPERIMENTAL]</emphasis></link></entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>
    
  <section id="changingTheDatabase">
    <title>Changing the database</title>
    
    <para>
    One of the things you probably want to do at some point, is configuring Activiti to
    use a different database. To configure the demo setup or to generate a configuration 
    file for a different database, follow these steps:
    <itemizedlist>
      <listitem>
        <para>
          Edit <literal>setup/build.properties</literal> and change the <literal>db</literal>
          parameter to your type of database {<literal>oracle | mysql | postgresql | h2</literal>}.
        </para>
      </listitem>
      <listitem>
        <para>
          Edit <literal>setup/build.${db}.properties</literal> and change the 
          JDBC connection parameters to those of your database installation.
        </para>
      </listitem>
    </itemizedlist>
    To create a configuration file for your database based on the properties you've specified in 
    the build.*.properties files run 
    </para>
    <programlisting>ant cfg.create</programlisting>
    <para>from within the <literal>setup</literal> folder.  The generate configuration file can 
    now be found in <literal>setup/build/activiti-cfg</literal>.
    Also, for convenience, a jar called <literal>activiti-cfg.jar</literal> containing the configuration file 
    can be found in <literal>setup/build</literal>
    </para>
    <para>If you want to run the demo setup on another database, first stop the demo setup with 
    </para>
    <programlisting>ant demo.stop demo.clean demo.start</programlisting>
    <para>Then clean and re-start the demo setup with 
    </para>
    <programlisting>ant demo.clean demo.start</programlisting> 
  </section>
  
  <section id="downloadingTheOracleDriver">
     <title>Downloading the Oracle driver</title>
     <para>When you want to run the demo setup using oracle as datasource, an extra step is required BEFORE you call the ant target <literal>demo.start</literal>. 
       <itemizedlist>
         <listitem>
           <para>
           Since we cannot redistribute the Oracle JDBC driver due to its licence, you should download it manually: 
         <ulink url="http://www.oracle.com/technetwork/database/enterprise-edition/jdbc-112010-090769.html">http://www.oracle.com/technetwork/database/enterprise-edition/jdbc-112010-090769.html</ulink>.
         Make sure you download ojdbc5.jar (our tests run against 10g ojdbc using version 11.2.0.1).
           </para>
         </listitem>
         <listitem>
           <para>
             Copy the downloaded ojdbc5.jar to <literal>setup/files/dependencies/libs/</literal>
             This filename is 
           </para>
         </listitem>
       </itemizedlist>
     </para>
   </section>
  
  <section id="databaseUpgrade">
     <title>Database upgrade</title>
     <para><link linkend="experimental"><emphasis role="bold">[EXPERIMENTAL]</emphasis></link></para>
     <para>We don't yet have enough coverage testing of upgrade to have full confidence in it.  
     That is why we still marked it as experimental.  Make sure you make a backup of your database 
     (using your database backup capabilities) before you run an upgrade.
     </para>
     <para>By default, a version check will be performed each time a process engine is created.
     This typically happens once at boot time of your application or of the Activiti webapps.
     If the Activiti library notices a difference between the library version and the version  
     of the Activiti database tables, then an exception is thrown.
     </para> 
     <para>To upgrade, you have to start with putting the following configuration property in your 
     activiti.cfg.xml configuration file:
     </para>
    <programlisting>&lt;beans ... &gt;

  &lt;bean id=&quot;processEngineConfiguration&quot; class=&quot;org.activiti.engine.impl.cfg.StandaloneProcessEngineConfiguration&quot;&gt;
    &lt;!-- ... --&gt;
    &lt;property name=&quot;databaseSchemaUpdate&quot; value=&quot;true&quot; /&gt;    
    &lt;!-- ... --&gt;
  &lt;/bean&gt;

&lt;/beans&gt;</programlisting>
     <para>Then just upgrade the Activiti libraries in your application.  Or start up a new version 
     of Activiti and point it to an database that contains an older version.  With <literal>databaseSchemaUpdate</literal>
     set to <literal>true</literal>, Activiti will automatically upgrade the DB schema to the newer version
     the first time when it notices that libraries and DB schema are out of sync.
     </para>
   </section>
</chapter>
